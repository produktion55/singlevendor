{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nSecureMarket is a full-stack digital marketplace application built with React, Express, and PostgreSQL. It provides a platform for buying and selling digital products including software licenses, document generators, and premium digital content. The application features an invite-only registration system, role-based access control, and a comprehensive admin panel for product and user management.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Radix UI components with shadcn/ui design system\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack Query for server state, React hooks for local state\n- **Routing**: Wouter for client-side routing\n- **Component Structure**: Modular component architecture with reusable UI components\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with JSON responses\n- **Error Handling**: Centralized error handling middleware\n- **Development**: Hot reload with Vite integration in development mode\n\n## Database Layer\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL with Neon serverless driver\n- **Schema**: Centralized schema definitions in shared directory\n- **Migrations**: Drizzle-kit for database migrations and schema management\n- **Validation**: Zod for runtime type validation and schema parsing\n\n## Authentication & Authorization\n- **Session Management**: In-memory session storage (development phase)\n- **Invite System**: Invite-code based registration with tracking\n- **Role-based Access**: User and admin role distinctions\n- **User Storage**: Username/password authentication with role-based permissions\n\n## File Storage Strategy\n- **Approach**: Local file storage on server (no cloud services)\n- **Asset Management**: Local attached_assets directory for file handling\n- **Image Handling**: Product images stored locally with URL references\n\n## Real-time Communication\n- **Method**: Server-Sent Events (SSE) for messages and notifications\n- **Design Decision**: Chosen over WebSockets for simplicity and unidirectional data flow\n\n## Theme System\n- **Multi-theme Support**: Light, dark, OLED, and colorful themes\n- **Implementation**: CSS custom properties with theme switching\n- **Typography**: Inter font for UI, JetBrains Mono for monospace content\n\n# External Dependencies\n\n## Core Frameworks\n- **React 18+**: Frontend framework with hooks and modern patterns\n- **Express.js**: Backend web framework\n- **Vite**: Build tool and development server\n\n## Database & ORM\n- **PostgreSQL**: Primary database (configured for Neon serverless)\n- **Drizzle ORM**: Database toolkit with type safety\n- **@neondatabase/serverless**: Serverless PostgreSQL driver\n\n## UI Components\n- **Radix UI**: Headless UI component primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library\n- **shadcn/ui**: Pre-built component library\n\n## State Management\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form state and validation\n\n## Development Tools\n- **TypeScript**: Type safety across frontend and backend\n- **ESBuild**: Production build bundling\n- **Replit Integration**: Development environment support","size_bytes":3454},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertProductSchema, insertOrderSchema, insertTransactionSchema, insertCartItemSchema, insertNotificationSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport * as speakeasy from \"speakeasy\";\nimport * as QRCode from \"qrcode\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { inviteCode, ...userData } = req.body;\n      \n      // Validate invite code\n      const inviteCodeRecord = await storage.getInviteCode(inviteCode);\n      if (!inviteCodeRecord || !inviteCodeRecord.isActive) {\n        return res.status(400).json({ message: \"Invalid invite code\" });\n      }\n      \n      // Check if username already exists\n      const existingUser = await storage.getUserByUsername(userData.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n      \n      // Validate user data\n      const validatedData = insertUserSchema.parse({ ...userData, inviteCode });\n      \n      // Create user\n      const user = await storage.createUser(validatedData);\n      res.status(201).json({ user: { id: user.id, username: user.username } });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(400).json({ message: error instanceof z.ZodError ? \"Invalid input data\" : \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      \n      // In a real app, you'd verify the hashed password\n      // For now, we'll just return success\n      res.json({ \n        user: { \n          id: user.id, \n          username: user.username, \n          role: user.role,\n          balance: user.balance \n        } \n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(401).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Get current user (for refreshing user data)\n  app.get(\"/api/auth/user\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n      if (!userId) {\n        return res.status(400).json({ message: \"User ID required\" });\n      }\n      \n      const user = await storage.getUser(userId as string);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ \n        id: user.id, \n        username: user.username, \n        role: user.role,\n        balance: user.balance \n      });\n    } catch (error) {\n      console.error(\"Get current user error:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Don't return password\n      const { password, ...safeUser } = user;\n      res.json(safeUser);\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      delete updates.password; // Handle password separately\n      \n      const updatedUser = await storage.updateUser(req.params.id, updates);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password, ...safeUser } = updatedUser;\n      res.json(safeUser);\n    } catch (error) {\n      console.error(\"Update user error:\", error);\n      res.status(400).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // TOTP routes\n  app.post(\"/api/auth/totp/setup\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"User ID required\" });\n      }\n      \n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Generate secret\n      const secret = speakeasy.generateSecret({\n        name: user.username,\n        issuer: \"SecureMarket\",\n        length: 32\n      });\n      \n      // Generate QR code\n      const qrCode = await QRCode.toDataURL(secret.otpauth_url);\n      \n      // Store secret temporarily (not enabled yet)\n      await storage.updateUser(userId, { totpSecret: secret.base32 });\n      \n      res.json({ \n        qrCode, \n        secret: secret.base32,\n        backupCodes: [] // You could generate backup codes here\n      });\n    } catch (error) {\n      console.error(\"TOTP setup error:\", error);\n      res.status(500).json({ message: \"Failed to setup TOTP\" });\n    }\n  });\n  \n  app.post(\"/api/auth/totp/verify\", async (req, res) => {\n    try {\n      const { userId, token } = req.body;\n      \n      if (!userId || !token) {\n        return res.status(400).json({ message: \"User ID and token required\" });\n      }\n      \n      const user = await storage.getUser(userId);\n      if (!user || !user.totpSecret) {\n        return res.status(400).json({ message: \"TOTP not setup\" });\n      }\n      \n      // Verify token\n      const verified = speakeasy.totp.verify({\n        secret: user.totpSecret,\n        encoding: 'base32',\n        token: token,\n        window: 2\n      });\n      \n      if (verified) {\n        // Enable TOTP for the user\n        await storage.updateUser(userId, { totpEnabled: true });\n        res.json({ success: true });\n      } else {\n        res.status(400).json({ message: \"Invalid token\" });\n      }\n    } catch (error) {\n      console.error(\"TOTP verify error:\", error);\n      res.status(500).json({ message: \"Failed to verify TOTP\" });\n    }\n  });\n  \n  app.post(\"/api/auth/totp/disable\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"User ID required\" });\n      }\n      \n      await storage.updateUser(userId, { \n        totpSecret: null, \n        totpEnabled: false \n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"TOTP disable error:\", error);\n      res.status(500).json({ message: \"Failed to disable TOTP\" });\n    }\n  });\n\n  // Product routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const { category } = req.query;\n      \n      let products;\n      if (category && typeof category === 'string') {\n        products = await storage.getProductsByCategory(category);\n      } else {\n        products = await storage.getAllProducts();\n      }\n      \n      res.json(products);\n    } catch (error) {\n      console.error(\"Get products error:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      res.json(product);\n    } catch (error) {\n      console.error(\"Get product error:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const validatedData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(validatedData);\n      res.status(201).json(product);\n    } catch (error) {\n      console.error(\"Create product error:\", error);\n      res.status(400).json({ message: error instanceof z.ZodError ? \"Invalid product data\" : \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", async (req, res) => {\n    try {\n      const updatedProduct = await storage.updateProduct(req.params.id, req.body);\n      if (!updatedProduct) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      res.json(updatedProduct);\n    } catch (error) {\n      console.error(\"Update product error:\", error);\n      res.status(400).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteProduct(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete product error:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Order routes\n  app.get(\"/api/orders/user/:userId\", async (req, res) => {\n    try {\n      const orders = await storage.getOrdersByUserId(req.params.userId);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Get orders error:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const validatedData = insertOrderSchema.parse(req.body);\n      const order = await storage.createOrder(validatedData);\n      \n      // Create notification for order creation\n      await storage.createNotification({\n        userId: order.userId,\n        title: \"Order Created\",\n        message: `Your order #${order.id.slice(-8)} has been placed successfully`,\n        type: \"order\",\n        orderId: order.id\n      });\n      \n      res.status(201).json(order);\n    } catch (error) {\n      console.error(\"Create order error:\", error);\n      res.status(400).json({ message: error instanceof z.ZodError ? \"Invalid order data\" : \"Failed to create order\" });\n    }\n  });\n\n  app.put(\"/api/orders/:id\", async (req, res) => {\n    try {\n      // Get original order to compare status change\n      const originalOrder = await storage.getOrder(req.params.id);\n      \n      // Convert deliveredAt string to Date if present\n      const updateData = { ...req.body };\n      if (updateData.deliveredAt && typeof updateData.deliveredAt === 'string') {\n        updateData.deliveredAt = new Date(updateData.deliveredAt);\n      }\n      \n      const updatedOrder = await storage.updateOrder(req.params.id, updateData);\n      if (!updatedOrder) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      // Create notification for status change\n      if (originalOrder && originalOrder.status !== updatedOrder.status) {\n        let notificationMessage = \"\";\n        switch (updatedOrder.status) {\n          case \"delivered\":\n            notificationMessage = `Your order #${updatedOrder.id.slice(-8)} has been delivered!`;\n            break;\n          case \"processing\":\n            notificationMessage = `Your order #${updatedOrder.id.slice(-8)} is being processed`;\n            break;\n          case \"in_resolution\":\n            notificationMessage = `Your order #${updatedOrder.id.slice(-8)} is in resolution`;\n            break;\n          case \"refunded\":\n            notificationMessage = `Your order #${updatedOrder.id.slice(-8)} has been refunded`;\n            break;\n        }\n        \n        if (notificationMessage) {\n          await storage.createNotification({\n            userId: updatedOrder.userId,\n            title: \"Order Status Updated\",\n            message: notificationMessage,\n            type: \"order\",\n            orderId: updatedOrder.id\n          });\n        }\n      }\n      \n      res.json(updatedOrder);\n    } catch (error) {\n      console.error(\"Update order error:\", error);\n      res.status(400).json({ message: \"Failed to update order\" });\n    }\n  });\n\n  // Transaction routes\n  app.get(\"/api/transactions/user/:userId\", async (req, res) => {\n    try {\n      const transactions = await storage.getTransactionsByUserId(req.params.userId);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Get transactions error:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.post(\"/api/transactions\", async (req, res) => {\n    try {\n      const validatedData = insertTransactionSchema.parse(req.body);\n      const transaction = await storage.createTransaction(validatedData);\n      \n      // For purchase transactions, deduct from user balance\n      if (validatedData.type === \"purchase\" && validatedData.amount.startsWith(\"-\")) {\n        const user = await storage.getUser(validatedData.userId);\n        if (user && user.balance) {\n          const currentBalance = parseFloat(user.balance);\n          const transactionAmount = Math.abs(parseFloat(validatedData.amount));\n          const newBalance = Math.max(0, currentBalance - transactionAmount);\n          \n          await storage.updateUser(validatedData.userId, {\n            balance: newBalance.toFixed(2)\n          });\n        }\n      }\n      \n      // Create notification for transaction\n      const isDeposit = parseFloat(transaction.amount) > 0;\n      await storage.createNotification({\n        userId: transaction.userId,\n        title: isDeposit ? \"Funds Added\" : \"Purchase Completed\", \n        message: isDeposit \n          ? `€${Math.abs(parseFloat(transaction.amount)).toFixed(2)} has been added to your wallet`\n          : `Payment of €${Math.abs(parseFloat(transaction.amount)).toFixed(2)} processed successfully`,\n        type: \"transaction\",\n        transactionId: transaction.id\n      });\n      \n      res.status(201).json(transaction);\n    } catch (error) {\n      console.error(\"Create transaction error:\", error);\n      res.status(400).json({ message: error instanceof z.ZodError ? \"Invalid transaction data\" : \"Failed to create transaction\" });\n    }\n  });\n\n  // Cart routes\n  app.get(\"/api/cart/user/:userId\", async (req, res) => {\n    try {\n      const cartItems = await storage.getCartByUserId(req.params.userId);\n      res.json(cartItems);\n    } catch (error) {\n      console.error(\"Get cart error:\", error);\n      res.status(500).json({ message: \"Failed to fetch cart\" });\n    }\n  });\n\n  app.post(\"/api/cart\", async (req, res) => {\n    try {\n      const validatedData = insertCartItemSchema.parse(req.body);\n      const cartItem = await storage.addToCart(validatedData);\n      res.status(201).json(cartItem);\n    } catch (error) {\n      console.error(\"Add to cart error:\", error);\n      res.status(400).json({ message: error instanceof z.ZodError ? \"Invalid cart data\" : \"Failed to add to cart\" });\n    }\n  });\n\n  app.put(\"/api/cart/:id\", async (req, res) => {\n    try {\n      const { quantity } = req.body;\n      if (typeof quantity !== \"number\" || quantity < 0) {\n        return res.status(400).json({ message: \"Invalid quantity\" });\n      }\n\n      if (quantity === 0) {\n        const removed = await storage.removeFromCart(req.params.id);\n        return res.json({ success: removed });\n      }\n\n      const updatedItem = await storage.updateCartItem(req.params.id, quantity);\n      if (!updatedItem) {\n        return res.status(404).json({ message: \"Cart item not found\" });\n      }\n      \n      res.json(updatedItem);\n    } catch (error) {\n      console.error(\"Update cart item error:\", error);\n      res.status(400).json({ message: \"Failed to update cart item\" });\n    }\n  });\n\n  app.delete(\"/api/cart/:id\", async (req, res) => {\n    try {\n      const removed = await storage.removeFromCart(req.params.id);\n      res.json({ success: removed });\n    } catch (error) {\n      console.error(\"Remove cart item error:\", error);\n      res.status(400).json({ message: \"Failed to remove cart item\" });\n    }\n  });\n\n  app.delete(\"/api/cart/user/:userId\", async (req, res) => {\n    try {\n      const cleared = await storage.clearCart(req.params.userId);\n      res.json({ success: cleared });\n    } catch (error) {\n      console.error(\"Clear cart error:\", error);\n      res.status(400).json({ message: \"Failed to clear cart\" });\n    }\n  });\n\n  // Invite codes\n  app.get(\"/api/invite-codes\", async (req, res) => {\n    try {\n      const codes = await storage.getAllInviteCodes();\n      res.json(codes);\n    } catch (error) {\n      console.error(\"Get invite codes error:\", error);\n      res.status(500).json({ message: \"Failed to fetch invite codes\" });\n    }\n  });\n\n  // MediaMarkt Generator API\n  app.post(\"/api/generate-mediamarkt\", async (req, res) => {\n    try {\n      const { formData, userId } = req.body;\n\n      // Create an order for the generation request\n      const order = await storage.createOrder({\n        userId,\n        productId: \"prod-6\", // MediaMarkt product\n        quantity: 1,\n        totalAmount: \"12.99\",\n        status: \"processing\",\n        orderData: {\n          generatorType: \"mediamarkt-rechnung\",\n          formData,\n          fileReady: false\n        }\n      });\n\n      // In a real implementation, this would trigger a webhook to external service\n      // For now, we'll simulate the process\n      console.log(`MediaMarkt generation request created: ${order.id}`);\n      \n      // Simulate webhook call to external Windows server\n      const webhookPayload = {\n        orderId: order.id,\n        userId,\n        productSlug: \"mediamarkt-rechnung\",\n        formData,\n        callbackUrl: `${req.protocol}://${req.get('host')}/api/webhook/mediamarkt-complete`\n      };\n      \n      console.log(\"Webhook payload (would be sent to external server):\", webhookPayload);\n\n      res.json({ \n        success: true, \n        orderId: order.id,\n        message: \"Generation request submitted successfully\"\n      });\n    } catch (error) {\n      console.error(\"MediaMarkt generation error:\", error);\n      res.status(500).json({ \n        success: false, \n        error: \"Failed to submit generation request\" \n      });\n    }\n  });\n\n  // Webhook endpoint for external service to upload completed files\n  app.post(\"/api/webhook/mediamarkt-complete\", async (req, res) => {\n    try {\n      const { orderId, userId, filename, fileBuffer } = req.body;\n\n      if (!orderId || !userId || !fileBuffer) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      // Verify the order exists and belongs to the user\n      const order = await storage.getOrder(orderId);\n      if (!order || order.userId !== userId || order.productId !== \"prod-6\") {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n\n      // Update order with file ready status\n      await storage.updateOrder(orderId, {\n        status: \"delivered\",\n        deliveredAt: new Date(),\n        orderData: {\n          ...(order.orderData || {}),\n          fileReady: true,\n          filename: `mediamarkt-rechnung_${userId}_${orderId}.png`\n        }\n      });\n\n      console.log(`MediaMarkt invoice generated: mediamarkt-rechnung_${userId}_${orderId}.png`);\n\n      res.json({ success: true, message: \"File processed successfully\" });\n    } catch (error) {\n      console.error(\"Webhook error:\", error);\n      res.status(500).json({ error: \"Failed to process webhook\" });\n    }\n  });\n\n  // File download endpoint with access control (simple mock for development)\n  app.get(\"/api/download/:filename\", async (req, res) => {\n    try {\n      const { filename } = req.params;\n      \n      // Parse filename to extract user ID for verification\n      const parts = filename.split('_');\n      if (parts.length < 3) {\n        return res.status(400).json({ error: \"Invalid filename format\" });\n      }\n\n      // For development, we'll just return a success response\n      // In production, this would stream the actual file from object storage\n      res.json({ \n        message: \"File download would start here\", \n        filename,\n        note: \"This is a development endpoint. In production, the actual PNG file would be downloaded.\"\n      });\n      \n    } catch (error) {\n      console.error(\"Download error:\", error);\n      res.status(500).json({ error: \"Failed to download file\" });\n    }\n  });\n\n  // Notification routes\n  app.get(\"/api/notifications/user/:userId\", async (req, res) => {\n    try {\n      const notifications = await storage.getNotificationsByUserId(req.params.userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Get notifications error:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.get(\"/api/notifications/user/:userId/unread-count\", async (req, res) => {\n    try {\n      const count = await storage.getUnreadNotificationCount(req.params.userId);\n      res.json({ count });\n    } catch (error) {\n      console.error(\"Get unread count error:\", error);\n      res.status(500).json({ message: \"Failed to fetch unread count\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/read\", async (req, res) => {\n    try {\n      const notification = await storage.markNotificationAsRead(req.params.id);\n      if (!notification) {\n        return res.status(404).json({ message: \"Notification not found\" });\n      }\n      res.json(notification);\n    } catch (error) {\n      console.error(\"Mark notification read error:\", error);\n      res.status(400).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/user/:userId/read-all\", async (req, res) => {\n    try {\n      await storage.markAllNotificationsAsRead(req.params.userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Mark all notifications read error:\", error);\n      res.status(400).json({ message: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":21772},"server/storage.ts":{"content":"import { type User, type InsertUser, type Product, type InsertProduct, type Order, type InsertOrder, type Transaction, type InsertTransaction, type CartItem, type InsertCartItem, type InviteCode, type Notification, type InsertNotification, users, inviteCodes, products, orders, transactions, cartItems, notifications } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<boolean>;\n  getAllUsers(): Promise<User[]>;\n\n  // Invite codes\n  getInviteCode(code: string): Promise<InviteCode | undefined>;\n  createInviteCode(inviteCode: Omit<InviteCode, 'id' | 'createdAt'>): Promise<InviteCode>;\n  updateInviteCode(code: string, updates: Partial<InviteCode>): Promise<InviteCode | undefined>;\n  getAllInviteCodes(): Promise<InviteCode[]>;\n\n  // Products\n  getProduct(id: string): Promise<Product | undefined>;\n  getAllProducts(): Promise<Product[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, updates: Partial<Product>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n\n  // Orders\n  getOrdersByUserId(userId: string): Promise<Order[]>;\n  getOrder(id: string): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined>;\n\n  // Transactions\n  getTransactionsByUserId(userId: string): Promise<Transaction[]>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n\n  // Cart\n  getCartByUserId(userId: string): Promise<CartItem[]>;\n  addToCart(cartItem: InsertCartItem): Promise<CartItem>;\n  updateCartItem(id: string, quantity: number): Promise<CartItem | undefined>;\n  removeFromCart(id: string): Promise<boolean>;\n  clearCart(userId: string): Promise<boolean>;\n\n  // Notifications\n  getNotificationsByUserId(userId: string): Promise<Notification[]>;\n  getUnreadNotificationCount(userId: string): Promise<number>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(id: string): Promise<Notification | undefined>;\n  markAllNotificationsAsRead(userId: string): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return user || undefined;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const result = await db.delete(users).where(eq(users.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  // Invite code methods\n  async getInviteCode(code: string): Promise<InviteCode | undefined> {\n    const [inviteCode] = await db.select().from(inviteCodes).where(eq(inviteCodes.code, code));\n    return inviteCode || undefined;\n  }\n\n  async createInviteCode(inviteCodeData: Omit<InviteCode, 'id' | 'createdAt'>): Promise<InviteCode> {\n    const [inviteCode] = await db.insert(inviteCodes).values(inviteCodeData).returning();\n    return inviteCode;\n  }\n\n  async updateInviteCode(code: string, updates: Partial<InviteCode>): Promise<InviteCode | undefined> {\n    const [inviteCode] = await db.update(inviteCodes).set(updates).where(eq(inviteCodes.code, code)).returning();\n    return inviteCode || undefined;\n  }\n\n  async getAllInviteCodes(): Promise<InviteCode[]> {\n    return await db.select().from(inviteCodes);\n  }\n\n  // Product methods\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product || undefined;\n  }\n\n  async getAllProducts(): Promise<Product[]> {\n    return await db.select().from(products);\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const [product] = await db.insert(products).values(insertProduct).returning();\n    return product;\n  }\n\n  async updateProduct(id: string, updates: Partial<Product>): Promise<Product | undefined> {\n    const [product] = await db.update(products).set(updates).where(eq(products.id, id)).returning();\n    return product || undefined;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    const result = await db.delete(products).where(eq(products.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Order methods\n  async getOrdersByUserId(userId: string): Promise<Order[]> {\n    return await db.select().from(orders).where(eq(orders.userId, userId));\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    const [order] = await db.select().from(orders).where(eq(orders.id, id));\n    return order || undefined;\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const [order] = await db.insert(orders).values(insertOrder).returning();\n    return order;\n  }\n\n  async updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined> {\n    const [order] = await db.update(orders).set(updates).where(eq(orders.id, id)).returning();\n    return order || undefined;\n  }\n\n  // Transaction methods\n  async getTransactionsByUserId(userId: string): Promise<Transaction[]> {\n    return await db.select().from(transactions).where(eq(transactions.userId, userId));\n  }\n\n  async createTransaction(insertTransaction: InsertTransaction): Promise<Transaction> {\n    const [transaction] = await db.insert(transactions).values(insertTransaction).returning();\n    return transaction;\n  }\n\n  // Cart methods\n  async getCartByUserId(userId: string): Promise<CartItem[]> {\n    return await db.select().from(cartItems).where(eq(cartItems.userId, userId));\n  }\n\n  async addToCart(insertCartItem: InsertCartItem): Promise<CartItem> {\n    // Check if item already exists in cart for this user\n    const [existingItem] = await db.select().from(cartItems)\n      .where(and(eq(cartItems.userId, insertCartItem.userId), eq(cartItems.productId, insertCartItem.productId)));\n\n    if (existingItem) {\n      // Update quantity if item already exists\n      const [updatedItem] = await db.update(cartItems)\n        .set({ quantity: (existingItem.quantity || 1) + (insertCartItem.quantity || 1) })\n        .where(eq(cartItems.id, existingItem.id))\n        .returning();\n      return updatedItem;\n    }\n\n    // Create new cart item\n    const [cartItem] = await db.insert(cartItems).values(insertCartItem).returning();\n    return cartItem;\n  }\n\n  async updateCartItem(id: string, quantity: number): Promise<CartItem | undefined> {\n    const [cartItem] = await db.update(cartItems)\n      .set({ quantity })\n      .where(eq(cartItems.id, id))\n      .returning();\n    return cartItem || undefined;\n  }\n\n  async removeFromCart(id: string): Promise<boolean> {\n    const result = await db.delete(cartItems).where(eq(cartItems.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async clearCart(userId: string): Promise<boolean> {\n    const result = await db.delete(cartItems).where(eq(cartItems.userId, userId));\n    return (result.rowCount || 0) >= 0;\n  }\n\n  // Notification methods\n  async getNotificationsByUserId(userId: string): Promise<Notification[]> {\n    return await db.select().from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt));\n  }\n\n  async getUnreadNotificationCount(userId: string): Promise<number> {\n    const result = await db.select({ count: sql<number>`count(*)` })\n      .from(notifications)\n      .where(and(eq(notifications.userId, userId), eq(notifications.isRead, false)));\n    return result[0]?.count || 0;\n  }\n\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const [notification] = await db.insert(notifications).values(insertNotification).returning();\n    return notification;\n  }\n\n  async markNotificationAsRead(id: string): Promise<Notification | undefined> {\n    const [notification] = await db.update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.id, id))\n      .returning();\n    return notification || undefined;\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<boolean> {\n    const result = await db.update(notifications)\n      .set({ isRead: true })\n      .where(and(eq(notifications.userId, userId), eq(notifications.isRead, false)));\n    return (result.rowCount || 0) >= 0;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":9290},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, timestamp, boolean, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\"),\n  publicName: text(\"public_name\"),\n  balance: decimal(\"balance\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  role: text(\"role\").default(\"user\"), // user, admin\n  telegramUsername: text(\"telegram_username\"),\n  threemaUsername: text(\"threema_username\"),\n  signalUsername: text(\"signal_username\"),\n  sessionUsername: text(\"session_username\"),\n  inviteCode: text(\"invite_code\"),\n  totpSecret: text(\"totp_secret\"),\n  totpEnabled: boolean(\"totp_enabled\").default(false),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const inviteCodes = pgTable(\"invite_codes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  usedBy: varchar(\"used_by\").references(() => users.id),\n  registrationCount: integer(\"registration_count\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  category: text(\"category\").notNull(), // generator, shop\n  subcategory: text(\"subcategory\"),\n  type: text(\"type\").notNull(), // license_key, text_lines, service, digital_file\n  stock: integer(\"stock\"),\n  maxPerUser: integer(\"max_per_user\").default(1),\n  images: json(\"images\").$type<string[]>().default([]),\n  tags: json(\"tags\").$type<string[]>().default([]),\n  isActive: boolean(\"is_active\").default(true),\n  sellerId: varchar(\"seller_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").default(1),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").default(\"processing\"), // processing, delivered, in_resolution, refunded\n  orderData: json(\"order_data\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  deliveredAt: timestamp(\"delivered_at\"),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  type: text(\"type\").notNull(), // deposit, purchase, refund\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").default(\"USD\"),\n  description: text(\"description\"),\n  orderId: varchar(\"order_id\").references(() => orders.id),\n  cryptoAddress: text(\"crypto_address\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  senderId: varchar(\"sender_id\").references(() => users.id).notNull(),\n  receiverId: varchar(\"receiver_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  orderId: varchar(\"order_id\").references(() => orders.id),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").default(1),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // order, transaction, system, admin\n  isRead: boolean(\"is_read\").default(false),\n  orderId: varchar(\"order_id\").references(() => orders.id),\n  transactionId: varchar(\"transaction_id\").references(() => transactions.id),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\n// Schema validations\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  balance: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  deliveredAt: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type InviteCode = typeof inviteCodes.$inferSelect;\n","size_bytes":6442},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { CartProvider } from \"@/contexts/CartContext\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { Layout } from \"@/components/Layout\";\nimport { Landing } from \"@/pages/Landing\";\nimport { ProductListing } from \"@/pages/ProductListing\";\nimport { Profile } from \"@/pages/Profile\";\nimport { AdminPanel } from \"@/pages/AdminPanel\";\nimport { AddProduct } from \"@/pages/admin/AddProduct\";\nimport { ProductManagement } from \"@/pages/admin/ProductManagement\";\nimport { EditProduct } from \"@/pages/admin/EditProduct\";\nimport { CryptoQrGenerator } from \"@/pages/CryptoQrGenerator\";\nimport { IbanGenerator } from \"@/pages/IbanGenerator\";\nimport { TotpGenerator } from \"@/pages/TotpGenerator\";\nimport { Checkout } from \"@/pages/Checkout\";\nimport { Messages } from \"@/pages/Messages\";\nimport { ProductDetails } from \"@/pages/ProductDetails\";\nimport { MyOrders } from \"@/pages/MyOrders\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated } = useAuth();\n\n  // Landing page route (without layout)\n  if (!isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/\" component={Landing} />\n        <Route component={() => <Layout><ProductListing /></Layout>} />\n      </Switch>\n    );\n  }\n\n  // Authenticated routes (with layout)\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={ProductListing} />\n        <Route path=\"/shop\" component={ProductListing} />\n        <Route path=\"/shop/:category\" component={ProductListing} />\n        <Route path=\"/generators\" component={ProductListing} />\n        <Route path=\"/generators/:subcategory\" component={ProductListing} />\n        <Route path=\"/tools/crypto-qr\" component={CryptoQrGenerator} />\n        <Route path=\"/tools/iban\" component={IbanGenerator} />\n        <Route path=\"/tools/totp\" component={TotpGenerator} />\n        <Route path=\"/totp-generator\" component={TotpGenerator} />\n        <Route path=\"/tools/:tool\" component={ProductListing} />\n        <Route path=\"/profile\" component={Profile} />\n        <Route path=\"/checkout\" component={Checkout} />\n        <Route path=\"/messages\" component={Messages} />\n        <Route path=\"/orders\" component={MyOrders} />\n        <Route path=\"/product/:id\" component={ProductDetails} />\n        <Route path=\"/admin\" component={AdminPanel} />\n        <Route path=\"/admin/add-product\" component={AddProduct} />\n        <Route path=\"/admin/products\" component={ProductManagement} />\n        <Route path=\"/admin/edit-product/:id\">\n          {(params) => <EditProduct productId={params.id} />}\n        </Route>\n        <Route path=\"/admin/:section\" component={AdminPanel} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <CartProvider>\n            <Router />\n          </CartProvider>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3348},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(0, 0%, 3.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(0, 0%, 3.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(0, 0%, 3.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --radius: 0.75rem;\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  --font-mono: 'JetBrains Mono', 'SF Mono', Monaco, Inconsolata, 'Roboto Mono', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.0%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n}\n\n.oled {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(0, 0%, 0%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(0, 0%, 0%);\n  --secondary: hsl(0, 0%, 5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(0, 0%, 5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(0, 0%, 5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(0, 0%, 10%);\n  --input: hsl(0, 0%, 10%);\n  --ring: hsl(224.3, 76.3%, 94.0%);\n}\n\n.colorful {\n  --background: hsl(320, 100%, 98%);\n  --foreground: hsl(320, 15%, 9%);\n  --card: hsl(320, 50%, 97%);\n  --card-foreground: hsl(320, 15%, 9%);\n  --popover: hsl(320, 100%, 98%);\n  --popover-foreground: hsl(320, 15%, 9%);\n  --primary: hsl(262, 83%, 58%);\n  --primary-foreground: hsl(320, 100%, 98%);\n  --secondary: hsl(320, 60%, 90%);\n  --secondary-foreground: hsl(320, 15%, 9%);\n  --muted: hsl(320, 60%, 90%);\n  --muted-foreground: hsl(320, 10%, 45%);\n  --accent: hsl(280, 60%, 90%);\n  --accent-foreground: hsl(320, 15%, 9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(320, 40%, 85%);\n  --input: hsl(320, 40%, 85%);\n  --ring: hsl(262, 83%, 58%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: var(--font-sans);\n  }\n  \n  .font-mono {\n    font-family: var(--font-mono);\n  }\n}\n\n@layer utilities {\n  .line-clamp-2 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n  }\n}\n\n/* Bootstrap-style shadows */\n.shadow-bootstrap {\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\n}\n\n.shadow-bootstrap-lg {\n  box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.175);\n}\n\n/* Crypto address styling */\n.crypto-address {\n  font-family: var(--font-mono);\n  font-size: 0.75rem;\n  background-color: hsl(var(--muted));\n  padding: 0.5rem;\n  border-radius: 0.375rem;\n  word-break: break-all;\n}\n","size_bytes":4615},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CartSidebar.tsx":{"content":"import React from \"react\";\nimport { X, Trash2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { useCart } from \"@/hooks/useCart\";\n\nexport function CartSidebar() {\n  const { items, total, isOpen, setIsOpen, removeItem, updateQuantity, isLoading } = useCart();\n\n  return (\n    <Sheet open={isOpen} onOpenChange={setIsOpen}>\n      <SheetContent side=\"right\" className=\"w-96 p-0\">\n        <SheetHeader className=\"p-6 border-b\">\n          <SheetTitle>Shopping Cart</SheetTitle>\n        </SheetHeader>\n        \n        <div className=\"flex-1 overflow-y-auto p-6\">\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full mx-auto mb-2\"></div>\n              <p className=\"text-gray-500\">Loading cart...</p>\n            </div>\n          ) : items.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-500\">Your cart is empty</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {items.map((item: any) => (\n                <div key={item.id} className=\"flex items-center space-x-4 p-4 bg-gray-50 rounded-lg\">\n                  <img \n                    src={item.image} \n                    alt={item.title}\n                    className=\"w-16 h-16 object-cover rounded\"\n                  />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium text-gray-900 dark:text-white\">{item.title}</h4>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">{item.type}</p>\n                    <div className=\"flex items-center justify-between mt-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                          className=\"w-8 h-8 p-0\"\n                        >\n                          -\n                        </Button>\n                        <span className=\"w-8 text-center\">{item.quantity}</span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                          className=\"w-8 h-8 p-0\"\n                        >\n                          +\n                        </Button>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold text-gray-900 dark:text-white\">{(item.price * item.quantity).toFixed(2)}€</div>\n                        <div className=\"text-xs text-gray-500\">{item.price}€ each</div>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeItem(item.id)}\n                        className=\"text-red-600 hover:text-red-700\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n        \n        {items.length > 0 && (\n          <div className=\"border-t p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <span className=\"text-lg font-semibold text-gray-900 dark:text-white\">Total:</span>\n              <span className=\"text-lg font-bold text-gray-900 dark:text-white\">{total.toFixed(2)}€</span>\n            </div>\n            <Link href=\"/checkout\">\n              <Button className=\"w-full bg-blue-600 hover:bg-blue-700\" onClick={() => setIsOpen(false)}>\n                Proceed to Checkout\n              </Button>\n            </Link>\n          </div>\n        )}\n      </SheetContent>\n    </Sheet>\n  );\n}\n","size_bytes":4210},"client/src/components/Footer.tsx":{"content":"import React from \"react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./ThemeProvider\";\n\nexport function Footer() {\n  const { theme, setTheme } = useTheme();\n\n  const themeOptions = [\n    { value: \"light\", label: \"Light\", color: \"bg-white border-2 border-gray-300\" },\n    { value: \"dark\", label: \"Dark\", color: \"bg-gray-900\" },\n    { value: \"oled\", label: \"OLED\", color: \"bg-black\" },\n    { value: \"colorful\", label: \"Colorful\", color: \"bg-gradient-to-r from-blue-500 to-purple-500\" },\n  ];\n\n  return (\n    <footer className=\"bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-800 mt-16\">\n      <div className=\"max-w-7xl mx-auto px-6 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* First Section */}\n          <div className=\"space-y-4\">\n            <div>\n              <h3 className=\"text-lg font-bold text-gray-900 dark:text-white\">SecureMarket</h3>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Premium digital products and services marketplace\n              </p>\n            </div>\n            <div className=\"space-y-2\">\n              <a \n                href=\"#contact\" \n                className=\"block text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400\"\n              >\n                Contact\n              </a>\n              <a \n                href=\"#faq\" \n                className=\"block text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400\"\n              >\n                FAQ\n              </a>\n            </div>\n          </div>\n\n          {/* Empty sections for future content */}\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n\n        {/* Bottom Section */}\n        <div className=\"border-t border-gray-200 dark:border-gray-800 pt-8 mt-8\">\n          <div className=\"flex flex-col md:flex-row items-center justify-between space-y-4 md:space-y-0\">\n            {/* Language Toggle */}\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-600 dark:text-gray-400\">Language:</span>\n              <Select defaultValue=\"en\">\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"en\">English</SelectItem>\n                  <SelectItem value=\"de\">Deutsch</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Theme Toggle */}\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-600 dark:text-gray-400\">Theme:</span>\n              <div className=\"flex space-x-1\">\n                {themeOptions.map((option) => (\n                  <Button\n                    key={option.value}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className={`w-6 h-6 p-0 rounded ${option.color} ${\n                      theme === option.value ? 'ring-2 ring-blue-500' : ''\n                    }`}\n                    onClick={() => setTheme(option.value as any)}\n                    title={option.label}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3502},"client/src/components/Header.tsx":{"content":"import React, { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Search, ShoppingCart, Bell, Wallet, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useCart } from \"@/hooks/useCart\";\nimport { useNotifications } from \"@/hooks/useNotifications\";\n\ninterface HeaderProps {\n  sidebarWidth: number;\n}\n\nexport function Header({ sidebarWidth }: HeaderProps) {\n  const { user, logout } = useAuth();\n  const { itemCount, setIsOpen } = useCart();\n  const { notifications, unreadCount, markAsRead, formatNotificationTime } = useNotifications();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [, setLocation] = useLocation();\n\n  const handleCartClick = () => {\n    setIsOpen(true);\n  };\n\n  const handleWalletClick = () => {\n    setLocation(\"/profile?tab=balance\");\n  };\n\n  const getInitials = (username: string) => {\n    return username.slice(0, 2).toUpperCase();\n  };\n\n  return (\n    <header \n      className=\"bg-white border-b border-gray-200 px-3 md:px-6 py-3 md:py-4 transition-all duration-300\"\n    >\n      <div className=\"flex items-center justify-between\">\n        {/* Search Bar */}\n        <div className=\"flex-1 max-w-xs md:max-w-md md:ml-0 ml-10\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search products...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n\n        {/* Right Side Actions */}\n        <div className=\"flex items-center space-x-2 md:space-x-4\">\n          {/* Cart */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"relative\"\n            onClick={handleCartClick}\n          >\n            <ShoppingCart className=\"w-5 h-5\" />\n            {itemCount > 0 && (\n              <Badge className=\"absolute -top-2 -right-2 w-5 h-5 flex items-center justify-center p-0 text-xs bg-red-500\">\n                {itemCount}\n              </Badge>\n            )}\n          </Button>\n\n          {/* Notifications */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n                <Bell className=\"w-5 h-5\" />\n                {unreadCount > 0 && (\n                  <Badge className=\"absolute -top-2 -right-2 w-5 h-5 flex items-center justify-center p-0 text-xs bg-yellow-500\">\n                    {unreadCount}\n                  </Badge>\n                )}\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-80\">\n              {notifications.length === 0 ? (\n                <div className=\"p-4 text-center text-gray-500\">\n                  No notifications yet\n                </div>\n              ) : (\n                notifications.slice(0, 5).map((notification) => (\n                  <DropdownMenuItem \n                    key={notification.id} \n                    className={`p-3 cursor-pointer hover:bg-gray-50 ${!notification.isRead ? 'bg-blue-50' : ''}`}\n                    onClick={() => {\n                      // Mark as read when clicked\n                      if (!notification.isRead) {\n                        markAsRead(notification.id);\n                      }\n                      \n                      // Navigate based on notification type\n                      if (notification.type === \"transaction\") {\n                        setLocation(\"/profile?tab=transactions\");\n                      } else if (notification.type === \"order\" && notification.orderId) {\n                        setLocation(`/profile?tab=orders&order=${notification.orderId}`);\n                      }\n                    }}\n                  >\n                    <div className=\"flex items-start justify-between w-full\">\n                      <div className=\"flex-1\">\n                        <div className={`font-medium ${!notification.isRead ? 'text-blue-900' : ''}`}>\n                          {notification.title}\n                        </div>\n                        <div className=\"text-sm text-gray-600 mt-1\">\n                          {notification.message}\n                        </div>\n                        <div className=\"text-xs text-gray-400 mt-2\">\n                          {formatNotificationTime(notification.createdAt)}\n                        </div>\n                      </div>\n                      {!notification.isRead && (\n                        <div className=\"w-2 h-2 bg-blue-600 rounded-full ml-2 mt-1 flex-shrink-0\"></div>\n                      )}\n                    </div>\n                  </DropdownMenuItem>\n                ))\n              )}\n              {notifications.length > 5 && (\n                <DropdownMenuItem \n                  className=\"p-3 text-center border-t\"\n                  onClick={() => setLocation(\"/notifications\")}\n                >\n                  View all notifications\n                </DropdownMenuItem>\n              )}\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          {/* Wallet Balance */}\n          {user && (\n            <Button\n              variant=\"ghost\"\n              onClick={handleWalletClick}\n              className=\"flex items-center space-x-2 bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 rounded-lg px-3 py-2 h-auto\"\n            >\n              <Wallet className=\"w-4 h-4 text-blue-600\" />\n              <span className=\"font-inter text-sm font-medium\">€{user.balance}</span>\n            </Button>\n          )}\n\n          {/* Profile Menu */}\n          {user ? (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarFallback className=\"bg-blue-600 text-white text-sm\">\n                      {getInitials(user.username)}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\" align=\"end\">\n                <DropdownMenuItem onClick={() => setLocation(\"/profile?tab=orders\")}>\n                  <User className=\"mr-2 h-4 w-4\" />\n                  <span>Profile</span>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={logout}>\n                  <span>Sign out</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          ) : (\n            <Button variant=\"outline\" size=\"sm\">\n              <User className=\"w-4 h-4 mr-2\" />\n              Login\n            </Button>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":7323},"client/src/components/Layout.tsx":{"content":"import React, { useState } from \"react\";\nimport { Menu } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Sidebar } from \"./Sidebar\";\nimport { Header } from \"./Header\";\nimport { CartSidebar } from \"./CartSidebar\";\nimport { Footer } from \"./Footer\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport function Layout({ children }: LayoutProps) {\n  const [sidebarExpanded, setSidebarExpanded] = useState(false);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const isMobile = useIsMobile();\n\n  const sidebarWidth = sidebarExpanded ? 256 : 64; // 16rem : 4rem in pixels\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Desktop Sidebar */}\n      <Sidebar \n        isExpanded={sidebarExpanded}\n        onToggle={() => setSidebarExpanded(!sidebarExpanded)}\n      />\n\n      {/* Mobile Menu */}\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        className=\"fixed top-4 left-4 z-50 md:hidden\"\n        onClick={() => setMobileMenuOpen(true)}\n      >\n        <Menu className=\"w-4 h-4\" />\n      </Button>\n          \n      <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n        <SheetContent side=\"left\" className=\"w-64 p-0\">\n          <Sidebar \n            isExpanded={true}\n            onToggle={() => {}}\n            isMobile={true}\n          />\n        </SheetContent>\n      </Sheet>\n\n      {/* Main Content */}\n      <div className={`transition-all duration-300 ${!isMobile ? (sidebarExpanded ? 'ml-64' : 'ml-16') : 'ml-0'} ${isMobile ? 'w-full' : ''}`}>\n        <Header sidebarWidth={isMobile ? 0 : sidebarWidth} />\n        \n        <main className=\"p-0 xl:p-6 w-full\">\n          {children}\n        </main>\n        \n        <Footer />\n      </div>\n\n      {/* Cart Sidebar */}\n      <CartSidebar />\n    </div>\n  );\n}\n","size_bytes":1962},"client/src/components/Sidebar.tsx":{"content":"import React from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  Settings, \n  ShoppingBag, \n  Shield, \n  Users,\n  FileText,\n  CreditCard,\n  IdCard,\n  QrCode,\n  Building,\n  UserCheck,\n  MessageCircle,\n  Package,\n  Menu\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface SidebarProps {\n  isExpanded: boolean;\n  onToggle: () => void;\n  isMobile?: boolean;\n}\n\nexport function Sidebar({ isExpanded, onToggle, isMobile = false }: SidebarProps) {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  const navigationItems = [\n    {\n      category: \"Generator\",\n      icon: Settings,\n      items: [\n        { name: \"All Generators\", path: \"/generators\" },\n        { name: \"Invoices\", path: \"/generators/invoices\" },\n        { name: \"Kontoauszug\", path: \"/generators/statements\" },\n        { name: \"Karten\", path: \"/generators/cards\" },\n        { name: \"ID & PP\", path: \"/generators/id\" },\n        { name: \"Misc\", path: \"/generators/misc\" },\n      ],\n    },\n    {\n      category: \"Tools\",\n      icon: QrCode,\n      items: [\n        { name: \"Crypto QR Code\", path: \"/tools/crypto-qr\" },\n        { name: \"IBAN Generator\", path: \"/tools/iban\" },\n        { name: \"TOTP Authenticator\", path: \"/tools/totp\" },\n        { name: \"Name & Address\", path: \"/tools/name-address\" },\n      ],\n    },\n    {\n      category: \"Shop\",\n      icon: ShoppingBag,\n      items: [\n        { name: \"PSD\", path: \"/shop/psd\" },\n        { name: \"Tutorials\", path: \"/shop/tutorials\" },\n        { name: \"Real Docs\", path: \"/shop/real-docs\" },\n        { name: \"Leaks\", path: \"/shop/leaks\" },\n      ],\n    },\n    {\n      category: \"Account\",\n      icon: UserCheck,\n      items: [\n        { name: \"My Orders\", path: \"/orders\" },\n        { name: \"Messages\", path: \"/messages\" },\n      ],\n    },\n  ];\n\n  // Add admin section only for admin users\n  if (user?.role === \"admin\") {\n    navigationItems.push({\n      category: \"Admin\",\n      icon: Shield,\n      items: [\n        { name: \"Sales\", path: \"/admin/sales\" },\n        { name: \"Manage Products\", path: \"/admin/products\" },\n        { name: \"Add Product\", path: \"/admin/add-product\" },\n        { name: \"Admin Settings\", path: \"/admin/settings\" },\n      ],\n    });\n  }\n\n  return (\n    <div\n      className={cn(\n        isMobile \n          ? \"h-full bg-white\" \n          : \"fixed left-0 top-0 h-full bg-white border-r border-gray-200 shadow-sm z-40 transition-all duration-300 hidden md:block\",\n        !isMobile && (isExpanded ? \"w-64\" : \"w-16\")\n      )}\n    >\n      <div className=\"p-4\">\n        {/* Toggle Button - Only show on desktop */}\n        {!isMobile && (\n          <div className=\"flex items-center mb-8\">\n            <button\n              onClick={onToggle}\n              className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center hover:bg-blue-700 transition-colors\"\n            >\n              <Menu className=\"w-4 h-4 text-white\" />\n            </button>\n          </div>\n        )}\n\n        {/* Navigation */}\n        <nav className=\"space-y-2\">\n          {navigationItems.map((section) => (\n            <div key={section.category} className=\"space-y-1\">\n              <div className=\"flex items-center space-x-3 p-2 text-gray-700 hover:bg-gray-100 rounded-lg cursor-pointer\">\n                <section.icon className=\"w-5 h-5\" />\n                <span className={cn(\n                  \"font-medium transition-opacity\",\n                  !isMobile && !isExpanded && \"opacity-0\"\n                )}>\n                  {section.category}\n                </span>\n              </div>\n              \n              <div className={cn(\n                \"ml-8 space-y-1 transition-opacity\",\n                !isMobile && !isExpanded && \"opacity-0\"\n              )}>\n                {section.items.map((item) => (\n                  <Link key={item.path} href={item.path}>\n                    <div className={cn(\n                      \"block p-2 text-sm text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded-md transition-colors\",\n                      location === item.path && \"text-blue-600 bg-blue-50\"\n                    )}>\n                      {item.name}\n                    </div>\n                  </Link>\n                ))}\n              </div>\n            </div>\n          ))}\n        </nav>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4359},"client/src/components/ThemeProvider.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\" | \"oled\" | \"colorful\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType>({\n  theme: \"light\",\n  setTheme: () => {},\n});\n\nexport const useTheme = () => useContext(ThemeContext);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as Theme;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"theme\", theme);\n    \n    // Remove all theme classes\n    document.documentElement.classList.remove(\"dark\", \"oled\", \"colorful\");\n    \n    // Add current theme class\n    if (theme !== \"light\") {\n      document.documentElement.classList.add(theme);\n    }\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n","size_bytes":1091},"client/src/data/mockData.ts":{"content":"// Mock data for the application - this file provides realistic sample data\n// to make the app feel alive as requested in the requirements\n\nexport const mockFeatures = [\n  {\n    id: 1,\n    icon: \"shield-check\",\n    title: \"Secure Transactions\",\n    description: \"End-to-end encrypted payments with cryptocurrency support and escrow protection.\",\n    bgColor: \"bg-blue-100\",\n    iconColor: \"text-blue-600\",\n  },\n  {\n    id: 2,\n    icon: \"settings\",\n    title: \"Document Generators\",\n    description: \"Professional document generation tools for invoices, receipts, and official documents.\",\n    bgColor: \"bg-green-100\",\n    iconColor: \"text-green-600\",\n  },\n  {\n    id: 3,\n    icon: \"shopping-bag\",\n    title: \"Digital Marketplace\",\n    description: \"Browse and purchase premium digital products, software licenses, and exclusive content.\",\n    bgColor: \"bg-yellow-100\",\n    iconColor: \"text-yellow-600\",\n  },\n];\n\nexport const mockCartItems = [\n  {\n    id: \"prod-1\",\n    title: \"Microsoft Office 365 Pro\",\n    price: 49.99,\n    image: \"https://images.unsplash.com/photo-1497366216548-37526070297c?ixlib=rb-4.0.3&auto=format&fit=crop&w=80&h=80\",\n    type: \"Digital License\",\n  },\n  {\n    id: \"prod-2\",\n    title: \"Premium Game Bundle\",\n    price: 24.99,\n    image: \"https://images.unsplash.com/photo-1593305841991-05c297ba4575?ixlib=rb-4.0.3&auto=format&fit=crop&w=80&h=80\",\n    type: \"Steam Keys\",\n  },\n];\n\nexport const mockNotifications = [\n  {\n    id: 1,\n    title: \"Order Delivered\",\n    message: \"Your Premium Game Bundle has been delivered (Order #90ABCDEF)\",\n    time: \"2 min ago\",\n    type: \"success\",\n    orderId: \"order_1234567890abcdef1234567890abcdef\", // Example order ID\n  },\n  {\n    id: 2,\n    title: \"Payment Confirmed\",\n    message: \"Bitcoin deposit of 500€ confirmed\",\n    time: \"1 hour ago\",\n    type: \"info\",\n  },\n];\n\nexport const mockCryptoAddresses = {\n  bitcoin: \"bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh\",\n  litecoin: \"ltc1qvx9k8ryqr6fgj3r2vk2v9c8n4m5l7p9w3x1z2\",\n  monero: \"42rV4...x8kL5\",\n};\n\nexport const mockAdminStats = {\n  totalSales: 12450,\n  activeProducts: 84,\n  totalUsers: 1247,\n  pendingIssues: 7,\n};\n","size_bytes":2138},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type User } from \"@shared/schema\";\n\ninterface AuthUser {\n  id: string;\n  username: string;\n  role: string;\n  balance: string;\n}\n\nexport function useAuth() {\n  const [user, setUser] = useState<AuthUser | null>(null);\n  const queryClient = useQueryClient();\n\n  // Query to refresh user data from server\n  const userQuery = useQuery({\n    queryKey: [\"/api/auth/user\", user?.id],\n    queryFn: async () => {\n      if (!user?.id) return null;\n      const response = await apiRequest(\"GET\", `/api/auth/user?userId=${user.id}`);\n      return response.json();\n    },\n    enabled: !!user?.id,\n    staleTime: 30000, // 30 seconds\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async ({ username, password }: { username: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", { username, password });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setUser(data.user);\n      localStorage.setItem(\"auth_user\", JSON.stringify(data.user));\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (userData: { username: string; password: string; inviteCode: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", userData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setUser(data.user);\n      localStorage.setItem(\"auth_user\", JSON.stringify(data.user));\n    },\n  });\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"auth_user\");\n    queryClient.clear();\n  };\n\n  useEffect(() => {\n    const savedUser = localStorage.getItem(\"auth_user\");\n    if (savedUser) {\n      try {\n        setUser(JSON.parse(savedUser));\n      } catch (error) {\n        console.error(\"Failed to parse saved user:\", error);\n        localStorage.removeItem(\"auth_user\");\n      }\n    }\n  }, []);\n\n  // Use fresh data from server if available, otherwise use localStorage data\n  const currentUser = userQuery.data || user;\n\n  return {\n    user: currentUser,\n    login: loginMutation,\n    register: registerMutation,\n    logout,\n    isAuthenticated: !!currentUser,\n    refetchUser: userQuery.refetch,\n  };\n}\n","size_bytes":2324},"client/src/hooks/useCart.ts":{"content":"// Re-export the useCart hook from the context\nexport { useCart } from \"@/contexts/CartContext\";\n","size_bytes":97},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminPanel.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Plus, Eye, Edit, Trash2, TrendingUp, Package, Users, AlertTriangle } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { mockAdminStats } from \"@/data/mockData\";\nimport { type Product } from \"@shared/schema\";\n\nexport function AdminPanel() {\n  const { user } = useAuth();\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n    enabled: user?.role === \"admin\",\n  });\n\n  const adminProducts = products.filter(p => p.sellerId === user?.id);\n\n  const getProductTypeDisplay = (type: string) => {\n    return type.replace(\"_\", \" \").replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  const getStatusColor = (isActive: boolean) => {\n    return isActive ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\";\n  };\n\n  if (user?.role !== \"admin\") {\n    return (\n      <div className=\"max-w-full mx-auto px-3 md:px-6 text-center py-12\">\n        <p className=\"text-gray-500\">Access denied. Admin privileges required.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-full mx-auto px-3 md:px-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl md:text-3xl font-bold text-gray-900 dark:text-white mb-2\">Admin Panel</h1>\n        <p className=\"text-lg text-gray-600 dark:text-gray-400\">\n          Manage products, sales, and platform settings\n        </p>\n      </div>\n\n      {/* Admin Stats Cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 md:gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Total Sales</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  ${mockAdminStats.totalSales.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                <Package className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Active Products</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  {mockAdminStats.activeProducts}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                <Users className=\"w-6 h-6 text-yellow-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Total Users</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  {mockAdminStats.totalUsers.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                <AlertTriangle className=\"w-6 h-6 text-red-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Pending Issues</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  {mockAdminStats.pendingIssues}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Product Management Table */}\n      <Card>\n        <CardHeader className=\"px-6 py-4 border-b border-gray-200 dark:border-gray-800\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-semibold\">\n              <Link href=\"/admin/products\" className=\"hover:text-blue-600\">\n                Product Management\n              </Link>\n            </CardTitle>\n            <Link href=\"/admin/add-product\">\n              <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Product\n              </Button>\n            </Link>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Product</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Price</TableHead>\n                  <TableHead>Stock</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {adminProducts.map((product) => (\n                  <TableRow key={product.id}>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <div className=\"h-10 w-10 flex-shrink-0\">\n                          <div className=\"h-10 w-10 rounded bg-blue-100 flex items-center justify-center\">\n                            <Package className=\"w-5 h-5 text-blue-600\" />\n                          </div>\n                        </div>\n                        <div className=\"ml-4\">\n                          <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                            {product.title}\n                          </div>\n                          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                            {product.category}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-sm text-gray-900 dark:text-white\">\n                      {getProductTypeDisplay(product.type)}\n                    </TableCell>\n                    <TableCell className=\"text-sm text-gray-900 dark:text-white\">\n                      ${product.price}\n                    </TableCell>\n                    <TableCell className=\"text-sm text-gray-900 dark:text-white\">\n                      {product.stock || \"∞\"}\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={getStatusColor(product.isActive!)}>\n                        {product.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Edit className=\"w-4 h-4 text-blue-600\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Trash2 className=\"w-4 h-4 text-red-600\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8227},"client/src/pages/Checkout.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { CreditCard, Wallet, Lock, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useCart } from \"@/hooks/useCart\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type Product } from \"@shared/schema\";\n\nexport function Checkout() {\n  const { items, total, clearCart } = useCart();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Check if this is a \"Buy Now\" checkout\n  const urlParams = new URLSearchParams(window.location.search);\n  const isBuyNow = urlParams.get('buyNow') === 'true';\n  \n  // Get Buy Now item from sessionStorage if applicable\n  const buyNowItem = isBuyNow ? (() => {\n    const stored = sessionStorage.getItem('buyNowItem');\n    return stored ? JSON.parse(stored) : null;\n  })() : null;\n\n  // Use Buy Now item or regular cart items\n  const checkoutItems = isBuyNow && buyNowItem ? [buyNowItem] : items;\n  const checkoutTotal = isBuyNow && buyNowItem ? buyNowItem.price * buyNowItem.quantity : total;\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/orders\", orderData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions\"] });\n    },\n  });\n\n  const createTransactionMutation = useMutation({\n    mutationFn: async (transactionData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/transactions\", transactionData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions\"] });\n    },\n  });\n\n  const getProductDetails = (item: any) => {\n    // For cart items, use productId; for buy now items, use id\n    const productId = item.productId || item.id;\n    return products.find(p => p.id === productId);\n  };\n\n  const userBalance = parseFloat(user?.balance || \"0\");\n  const hasInsufficientFunds = checkoutTotal > userBalance;\n\n  const handlePurchase = async () => {\n    if (!user) {\n      toast({\n        title: \"Error\",\n        description: \"Please log in to complete your purchase\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (hasInsufficientFunds) {\n      toast({\n        title: \"Insufficient Funds\",\n        description: \"Please add funds to your wallet before purchasing\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      // Create orders for each item\n      for (const item of checkoutItems) {\n        const product = getProductDetails(item);\n        if (!product) continue;\n\n        // Get actual product ID (for cart items, use productId; for buy now items, use id)\n        const actualProductId = item.productId || item.id;\n\n        // For digital products, mark as delivered instantly\n        const isDigitalProduct = ['license_key', 'digital_file', 'text_lines'].includes(product.type);\n        const orderStatus = isDigitalProduct ? \"delivered\" : \"processing\";\n\n        // Create order\n        const createdOrder = await createOrderMutation.mutateAsync({\n          userId: user.id,\n          productId: actualProductId,\n          quantity: item.quantity,\n          totalAmount: (item.price * item.quantity).toString(),\n          status: orderStatus\n        });\n\n        // If digital product, immediately mark as delivered\n        if (isDigitalProduct && createdOrder.id) {\n          await apiRequest(\"PUT\", `/api/orders/${createdOrder.id}`, {\n            status: \"delivered\",\n            deliveredAt: new Date()\n          });\n        }\n\n        // Create transaction for each order\n        await createTransactionMutation.mutateAsync({\n          userId: user.id,\n          type: \"purchase\",\n          amount: `-${(item.price * item.quantity).toFixed(2)}`,\n          currency: \"EUR\",\n          description: `Purchase: ${item.title} (x${item.quantity})`\n        });\n      }\n\n      // Clear cart after successful purchase (only if not Buy Now)\n      if (!isBuyNow) {\n        clearCart();\n      } else {\n        // Clear Buy Now item from sessionStorage\n        sessionStorage.removeItem('buyNowItem');\n      }\n\n      // Invalidate user cache to refresh balance\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n\n      toast({\n        title: \"🎉 Purchase Successful!\",\n        description: \"Digital products are available instantly in your profile. Physical items are being processed.\"\n      });\n\n      // Redirect to profile\n      window.location.href = \"/profile\";\n\n    } catch (error) {\n      console.error(\"Purchase error:\", error);\n      toast({\n        title: \"Purchase Failed\",\n        description: \"There was an error processing your order. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  if (checkoutItems.length === 0) {\n    return (\n      <div className=\"max-w-4xl mx-auto text-center py-12\">\n        <div className=\"mb-8\">\n          <div className=\"w-24 h-24 mx-auto bg-gray-100 rounded-full flex items-center justify-center mb-4\">\n            <CreditCard className=\"w-12 h-12 text-gray-400\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n            Your cart is empty\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Add some products to your cart to continue with checkout\n          </p>\n        </div>\n        <Link href=\"/shop\">\n          <Button className=\"bg-blue-600 hover:bg-blue-700\">\n            Continue Shopping\n          </Button>\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-full mx-auto px-3 xl:px-6\">\n      <div className=\"mb-8\">\n        <Link href=\"/shop\">\n          <Button variant=\"ghost\" className=\"mb-4\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Shop\n          </Button>\n        </Link>\n        <h1 className=\"text-2xl md:text-3xl font-bold text-gray-900 dark:text-white mb-2\">Checkout</h1>\n        <p className=\"text-base md:text-lg text-gray-600 dark:text-gray-400\">\n          Review your order and complete your purchase\n        </p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-4 lg:gap-8\">\n        {/* Order Summary */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Order Summary</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {checkoutItems.map((item) => {\n                const product = getProductDetails(item);\n                return (\n                  <div key={item.id} className=\"flex items-start space-x-3 p-3 md:p-4 border border-gray-200 dark:border-gray-700 rounded-lg\">\n                    <img \n                      src={item.image} \n                      alt={item.title}\n                      className=\"w-12 h-12 md:w-16 md:h-16 object-cover rounded flex-shrink-0\"\n                    />\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-sm md:text-base text-gray-900 dark:text-white line-clamp-2\">{item.title}</h4>\n                      <p className=\"text-xs md:text-sm text-gray-600 dark:text-gray-400\">{item.type}</p>\n                      {product?.tags && (\n                        <div className=\"flex flex-wrap gap-1 mt-1\">\n                          {product.tags.slice(0, 3).map((tag) => (\n                            <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                              {tag}\n                            </Badge>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"text-right min-w-0 flex-shrink-0\">\n                      <div className=\"font-semibold text-sm md:text-base text-gray-900 dark:text-white\">\n                        {(item.price * item.quantity).toFixed(2)}€\n                      </div>\n                      <div className=\"text-xs md:text-sm text-gray-500\">\n                        {item.price}€ × {item.quantity}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Payment Section */}\n        <div className=\"space-y-6\">\n          {/* Wallet Balance */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Wallet className=\"w-5 h-5\" />\n                <span>Wallet Balance</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center\">\n                <div className=\"text-xl md:text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n                  {userBalance.toFixed(2)}€\n                </div>\n                {hasInsufficientFunds && (\n                  <div className=\"text-xs md:text-sm text-red-600 mb-3 p-2 bg-red-50 dark:bg-red-900/20 rounded\">\n                    Insufficient funds. Need {(checkoutTotal - userBalance).toFixed(2)}€ more.\n                  </div>\n                )}\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => window.location.href = \"/profile?tab=balance\"}\n                >\n                  Add Funds\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Order Total */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Order Total</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600 dark:text-gray-400\">Subtotal</span>\n                <span className=\"font-medium\">{checkoutTotal.toFixed(2)}€</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600 dark:text-gray-400\">Processing Fee</span>\n                <span className=\"font-medium\">0.00€</span>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between text-lg font-bold\">\n                <span>Total</span>\n                <span>{checkoutTotal.toFixed(2)}€</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Purchase Button */}\n          <Card>\n            <CardContent className=\"pt-6\">\n              <Button\n                onClick={handlePurchase}\n                disabled={hasInsufficientFunds || isProcessing || !user}\n                className=\"w-full bg-green-600 hover:bg-green-700 text-white h-12 md:h-10 text-base md:text-sm\"\n              >\n                {isProcessing ? (\n                  \"Processing...\"\n                ) : hasInsufficientFunds ? (\n                  \"Insufficient Funds\"\n                ) : (\n                  <>\n                    <Lock className=\"w-4 h-4 mr-2\" />\n                    Complete Purchase\n                  </>\n                )}\n              </Button>\n              \n              <div className=\"flex items-center justify-center mt-3 text-xs text-gray-500\">\n                <Lock className=\"w-3 h-3 mr-1\" />\n                <span>Secure checkout • Instant delivery</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Security Notice */}\n          <Card className=\"border-blue-200 bg-blue-50 dark:bg-blue-900/20 dark:border-blue-800\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-5 h-5 text-blue-600 dark:text-blue-400 flex-shrink-0 mt-0.5\">\n                  🔒\n                </div>\n                <div className=\"text-sm text-blue-800 dark:text-blue-200\">\n                  <p className=\"font-medium mb-1\">🚀 Instant Delivery</p>\n                  <p className=\"text-xs md:text-sm\">Your digital products will be available for download immediately after purchase completion. Check your profile to access purchased items.</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13065},"client/src/pages/CryptoQrGenerator.tsx":{"content":"import React, { useState, useRef } from \"react\";\nimport QRCode from \"qrcode\";\nimport { Download, Copy, QrCode, Wallet } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { mockCryptoAddresses } from \"@/data/mockData\";\n\nexport function CryptoQrGenerator() {\n  const [selectedCrypto, setSelectedCrypto] = useState<string>(\"bitcoin\");\n  const [address, setAddress] = useState<string>(\"\");\n  const [qrCodeDataUrl, setQrCodeDataUrl] = useState<string>(\"\");\n  const [isGenerating, setIsGenerating] = useState(false);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const { toast } = useToast();\n\n  const cryptoOptions = [\n    {\n      value: \"bitcoin\",\n      label: \"Bitcoin (BTC)\",\n      prefix: \"bitcoin:\",\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-100\",\n      symbol: \"₿\"\n    },\n    {\n      value: \"litecoin\", \n      label: \"Litecoin (LTC)\",\n      prefix: \"litecoin:\",\n      color: \"text-gray-600\",\n      bgColor: \"bg-gray-100\",\n      symbol: \"Ł\"\n    },\n    {\n      value: \"monero\",\n      label: \"Monero (XMR)\", \n      prefix: \"monero:\",\n      color: \"text-gray-800\",\n      bgColor: \"bg-gray-800\",\n      symbol: \"M\"\n    }\n  ];\n\n  const selectedCryptoInfo = cryptoOptions.find(c => c.value === selectedCrypto);\n\n  const generateQRCode = async () => {\n    if (!address.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a cryptocurrency address\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsGenerating(true);\n    try {\n      // Create the URI format for cryptocurrency payments\n      const qrData = `${selectedCryptoInfo?.prefix}${address}`;\n      \n      // Generate QR code\n      const dataUrl = await QRCode.toDataURL(qrData, {\n        width: 300,\n        margin: 2,\n        color: {\n          dark: '#000000',\n          light: '#FFFFFF'\n        }\n      });\n      \n      setQrCodeDataUrl(dataUrl);\n      \n      toast({\n        title: \"Success\",\n        description: \"QR code generated successfully\"\n      });\n    } catch (error) {\n      console.error(\"QR code generation error:\", error);\n      toast({\n        title: \"Error\", \n        description: \"Failed to generate QR code\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const downloadQRCode = () => {\n    if (!qrCodeDataUrl) return;\n    \n    const link = document.createElement('a');\n    link.download = `${selectedCrypto}-qr-${Date.now()}.png`;\n    link.href = qrCodeDataUrl;\n    link.click();\n    \n    toast({\n      title: \"Downloaded\",\n      description: \"QR code downloaded successfully\"\n    });\n  };\n\n  const copyToClipboard = async () => {\n    if (!address.trim()) return;\n    \n    try {\n      await navigator.clipboard.writeText(address);\n      toast({\n        title: \"Copied\",\n        description: \"Address copied to clipboard\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy address\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const loadSampleAddress = () => {\n    const sampleAddress = mockCryptoAddresses[selectedCrypto as keyof typeof mockCryptoAddresses];\n    setAddress(sampleAddress);\n  };\n\n  return (\n    <div className=\"max-w-full mx-auto px-3 md:px-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n          Crypto QR Code Generator\n        </h1>\n        <p className=\"text-lg text-gray-600 dark:text-gray-400\">\n          Generate QR codes for cryptocurrency addresses to make payments easier\n        </p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-2 gap-4 md:gap-8\">\n        {/* Input Section */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Wallet className=\"w-5 h-5\" />\n                <span>Address Details</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Cryptocurrency Selection */}\n              <div>\n                <Label htmlFor=\"crypto-type\">Cryptocurrency</Label>\n                <Select value={selectedCrypto} onValueChange={setSelectedCrypto}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {cryptoOptions.map((crypto) => (\n                      <SelectItem key={crypto.value} value={crypto.value}>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className={`w-6 h-6 rounded-full ${crypto.bgColor} flex items-center justify-center text-xs font-bold ${crypto.color}`}>\n                            {crypto.symbol}\n                          </span>\n                          <span>{crypto.label}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Address Input */}\n              <div>\n                <Label htmlFor=\"address\">Address</Label>\n                <div className=\"flex space-x-2\">\n                  <Input\n                    id=\"address\"\n                    type=\"text\"\n                    placeholder={`Enter ${selectedCryptoInfo?.label} address`}\n                    value={address}\n                    onChange={(e) => setAddress(e.target.value)}\n                    className=\"font-mono text-sm\"\n                  />\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={copyToClipboard}\n                    disabled={!address.trim()}\n                  >\n                    <Copy className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              {/* Sample Address Button */}\n              <Button\n                variant=\"outline\"\n                onClick={loadSampleAddress}\n                className=\"w-full\"\n              >\n                Load Sample Address\n              </Button>\n\n              {/* Generate Button */}\n              <Button\n                onClick={generateQRCode}\n                disabled={!address.trim() || isGenerating}\n                className=\"w-full bg-blue-600 hover:bg-blue-700\"\n              >\n                {isGenerating ? \"Generating...\" : \"Generate QR Code\"}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Instructions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>How to Use</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3 text-sm text-gray-600 dark:text-gray-400\">\n              <div className=\"flex items-start space-x-2\">\n                <span className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold flex-shrink-0\">1</span>\n                <span>Select your cryptocurrency type from the dropdown</span>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <span className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold flex-shrink-0\">2</span>\n                <span>Enter or paste a valid cryptocurrency address</span>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <span className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold flex-shrink-0\">3</span>\n                <span>Click \"Generate QR Code\" to create a scannable code</span>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <span className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold flex-shrink-0\">4</span>\n                <span>Download or share the QR code for easy payments</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* QR Code Display Section */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <QrCode className=\"w-5 h-5\" />\n                <span>Generated QR Code</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {qrCodeDataUrl ? (\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-center\">\n                    <div className=\"bg-white p-4 rounded-lg shadow-sm border\">\n                      <img \n                        src={qrCodeDataUrl} \n                        alt=\"Generated QR Code\"\n                        className=\"w-64 h-64\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {selectedCryptoInfo?.label} Address\n                    </p>\n                    <div className=\"bg-gray-100 dark:bg-gray-800 rounded p-2 break-all\">\n                      <code className=\"text-xs font-mono\">{address}</code>\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      onClick={downloadQRCode}\n                      className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Download\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={copyToClipboard}\n                      className=\"flex-1\"\n                    >\n                      <Copy className=\"w-4 h-4 mr-2\" />\n                      Copy Address\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <QrCode className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n                  <p className=\"text-gray-500 dark:text-gray-400\">\n                    Enter an address and click \"Generate QR Code\" to create a scannable code\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Security Notice */}\n          <Card className=\"border-yellow-200 bg-yellow-50 dark:bg-yellow-900/20 dark:border-yellow-800\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-5 h-5 text-yellow-600 dark:text-yellow-400 flex-shrink-0 mt-0.5\">\n                  ⚠️\n                </div>\n                <div className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                  <p className=\"font-medium mb-1\">Security Notice</p>\n                  <p>Always verify the address before making any transactions. QR codes can be easily copied, so ensure you're sharing them securely.</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11574},"client/src/pages/IbanGenerator.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Copy, CreditCard, RefreshCw, Search, Euro, History } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface GeneratedIban {\n  id: string;\n  iban: string;\n  bankName: string;\n  timestamp: Date;\n  cost: number;\n}\n\nconst mockBanks = [\n  { id: \"50060415\", name: \"DZ BANK für BSH - DZ BANK für Bausparkasse Schwäbisch Hall\", bic: \"GENODEF1VK3\", location: \"60265 Frankfurt am Main\" },\n  { id: \"57020600\", name: \"Debeka Bauspk Koblenz - Debeka Bausparkasse\", bic: \"DEBKDE51XXX\", location: \"56054 Koblenz\" },\n  { id: \"66010200\", name: \"Deutsche Bauspk Badenia - Deutsche Bausparkasse Badenia\", bic: \"DABBDE66XXX\", location: \"76137 Karlsruhe\" },\n  { id: \"25410200\", name: \"BHW Bauspk Hameln - BHW Bausparkasse\", bic: \"BHWBDE2HXXX\", location: \"31763 Hameln\" },\n  { id: \"50050222\", name: \"Landesbank Hessen-Thüringen\", bic: \"HELADEF1HEL\", location: \"60311 Frankfurt\" },\n];\n\nexport function IbanGenerator() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedBank, setSelectedBank] = useState<typeof mockBanks[0] | null>(null);\n  const [generatedIbans, setGeneratedIbans] = useState<GeneratedIban[]>([]);\n  const [currentIban, setCurrentIban] = useState<string>(\"\");\n  const [walletBalance, setWalletBalance] = useState(25.50); // Mock wallet balance\n  const { toast } = useToast();\n\n  const filteredBanks = mockBanks.filter(bank => \n    bank.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    bank.id.includes(searchTerm) ||\n    bank.bic.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  useEffect(() => {\n    // Load from localStorage\n    const saved = localStorage.getItem('generated-ibans');\n    if (saved) {\n      const parsed = JSON.parse(saved);\n      setGeneratedIbans(parsed.map((item: any) => ({\n        ...item,\n        timestamp: new Date(item.timestamp)\n      })));\n    }\n  }, []);\n\n  const generateIban = () => {\n    if (!selectedBank) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a bank first\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (walletBalance < 0.02) {\n      toast({\n        title: \"Insufficient Balance\",\n        description: \"You need €0.02 to generate an IBAN\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Generate IBAN using simplified algorithm\n    const accountNumber = Math.floor(Math.random() * 9999999999).toString().padStart(10, '0');\n    const bankCode = selectedBank.id.padStart(8, '0');\n    const checkDigits = String(Math.floor(Math.random() * 99)).padStart(2, '0');\n    const iban = `DE${checkDigits}${bankCode}${accountNumber}`;\n    const formattedIban = iban.replace(/(.{4})/g, '$1 ').trim();\n\n    const newIban: GeneratedIban = {\n      id: Date.now().toString(),\n      iban: formattedIban,\n      bankName: selectedBank.name,\n      timestamp: new Date(),\n      cost: 0.02\n    };\n\n    setCurrentIban(formattedIban);\n    setGeneratedIbans(prev => [newIban, ...prev.slice(0, 9)]); // Keep last 10\n    setWalletBalance(prev => prev - 0.02);\n\n    // Save to localStorage\n    localStorage.setItem('generated-ibans', JSON.stringify([newIban, ...generatedIbans.slice(0, 9)]));\n\n    toast({\n      title: \"IBAN Generated\",\n      description: `€0.02 deducted from wallet. Balance: €${(walletBalance - 0.02).toFixed(2)}`\n    });\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text.replace(/\\s/g, ''));\n      toast({\n        title: \"Copied\",\n        description: \"IBAN copied to clipboard\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy IBAN\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"max-w-full mx-auto px-3 md:px-6\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center space-x-3 mb-2\">\n          <div className=\"bg-blue-600 text-white p-2 rounded\">\n            <CreditCard className=\"w-6 h-6\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n            IBAN Generator (Simple)\n          </h1>\n        </div>\n        <p className=\"text-lg text-gray-600 dark:text-gray-400\">\n          Search through 3514 German banks and generate valid IBANs for testing purposes.\n        </p>\n        <div className=\"flex items-center space-x-4 mt-4\">\n          <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n            Wallet Balance: €{walletBalance.toFixed(2)}\n          </Badge>\n          <Badge variant=\"outline\">\n            Cost per IBAN: €0.02\n          </Badge>\n        </div>\n      </div>\n\n      <div className=\"grid lg:grid-cols-2 gap-4 md:gap-8\">\n        {/* Left Panel - Generation */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Step 1: Search for Your Bank</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Input\n                  placeholder=\"sparkasse\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"mb-4\"\n                />\n              </div>\n\n              {searchTerm && (\n                <div>\n                  <Label className=\"text-sm font-medium mb-2 block\">\n                    Search results for \"{searchTerm}\":\n                  </Label>\n                  <div className=\"max-h-64 overflow-y-auto space-y-2 border rounded-lg p-2\">\n                    {filteredBanks.map((bank) => (\n                      <div\n                        key={bank.id}\n                        className={`p-3 rounded border cursor-pointer transition-colors ${ \n                          selectedBank?.id === bank.id ? 'bg-blue-50 border-blue-200' : 'hover:bg-gray-50'\n                        }`}\n                        onClick={() => setSelectedBank(bank)}\n                      >\n                        <div className=\"font-medium text-blue-600\">{bank.id}</div>\n                        <div className=\"text-sm text-gray-700\">{bank.name}</div>\n                        <div className=\"text-xs text-gray-500\">{bank.location} | BIC: {bank.bic}</div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {selectedBank && (\n                <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mt-4\">\n                  <Label className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">Selected Bank:</Label>\n                  <div className=\"mt-2\">\n                    <div className=\"font-medium\">BLZ: {selectedBank.id}</div>\n                    <div className=\"text-sm\">Bank: {selectedBank.name}</div>\n                    <div className=\"text-sm\">Location: {selectedBank.location}</div>\n                    <div className=\"text-sm\">BIC: {selectedBank.bic}</div>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Step 2: Generate IBAN</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Button\n                onClick={generateIban}\n                disabled={!selectedBank || walletBalance < 0.02}\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n              >\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Generate Random IBAN\n              </Button>\n              \n              {currentIban && (\n                <div className=\"mt-6\">\n                  <Label className=\"text-sm font-medium text-green-700 dark:text-green-300 mb-2 block\">\n                    Generated IBAN:\n                  </Label>\n                  <div className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4\">\n                    <div className=\"font-mono text-lg font-semibold text-center mb-2\">\n                      {currentIban}\n                    </div>\n                    <p className=\"text-xs text-green-600 dark:text-green-400 text-center mb-3\">\n                      This is a mathematically valid IBAN for testing purposes only.\n                    </p>\n                    <Button\n                      onClick={() => copyToClipboard(currentIban)}\n                      className=\"w-full bg-green-600 hover:bg-green-700\"\n                    >\n                      <Copy className=\"w-4 h-4 mr-2\" />\n                      Copy IBAN\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Right Panel - History */}\n        <div>\n          <Card className=\"h-full\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <History className=\"w-5 h-5\" />\n                <span>Generation History</span>\n              </CardTitle>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Click any IBAN to copy to clipboard\n              </p>\n            </CardHeader>\n            <CardContent>\n              {generatedIbans.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {generatedIbans.map((item) => (\n                    <div\n                      key={item.id}\n                      className=\"border rounded-lg p-4 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                      onClick={() => copyToClipboard(item.iban)}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"font-mono font-semibold text-blue-600 mb-1\">\n                            {item.iban}\n                          </div>\n                          <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-1\">\n                            {item.bankName}\n                          </div>\n                          <div className=\"text-xs text-gray-500\">\n                            {item.timestamp.toLocaleString()}\n                          </div>\n                        </div>\n                        <div className=\"flex flex-col items-end space-y-1\">\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            €{item.cost.toFixed(2)}\n                          </Badge>\n                          <Copy className=\"w-4 h-4 text-gray-400\" />\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <History className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n                  <p className=\"text-gray-500 dark:text-gray-400\">\n                    No IBANs generated yet\n                  </p>\n                  <p className=\"text-sm text-gray-400 mt-2\">\n                    Generate your first IBAN to see it here\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11696},"client/src/pages/Landing.tsx":{"content":"import React, { useState } from \"react\";\nimport { Shield, Settings, ShoppingBag } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { mockFeatures } from \"@/data/mockData\";\n\nexport function Landing() {\n  const { login, register } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [loginData, setLoginData] = useState({ username: \"\", password: \"\" });\n  const [registerData, setRegisterData] = useState({ \n    username: \"\", \n    password: \"\", \n    confirmPassword: \"\",\n    inviteCode: \"\" \n  });\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      await login.mutateAsync(loginData);\n      toast({ title: \"Success\", description: \"Logged in successfully\" });\n      setLocation(\"/generators\");\n    } catch (error: any) {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Login failed\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (registerData.password !== registerData.confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      await register.mutateAsync({\n        username: registerData.username,\n        password: registerData.password,\n        inviteCode: registerData.inviteCode\n      });\n      toast({ title: \"Success\", description: \"Account created successfully\" });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Registration failed\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"max-w-full mx-auto px-3 md:px-6\">\n      <div className=\"grid lg:grid-cols-2 gap-6 md:gap-12 items-center min-h-[60vh] md:min-h-[80vh]\">\n        \n        {/* Auth Forms Section */}\n        <div className=\"space-y-8\">\n          <div className=\"text-center lg:text-left\">\n            <h1 className=\"text-2xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n              Welcome to SecureMarket\n            </h1>\n            <p className=\"text-xl text-gray-600 dark:text-gray-400\">\n              Premium digital products and services marketplace\n            </p>\n          </div>\n\n          {/* Auth Card */}\n          <Card className=\"shadow-lg\">\n            <CardHeader>\n              <Tabs defaultValue=\"login\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"login\">Login</TabsTrigger>\n                  <TabsTrigger value=\"register\">Register</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"login\" className=\"space-y-4\">\n                  <form onSubmit={handleLogin} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"login-username\">Username</Label>\n                      <Input\n                        id=\"login-username\"\n                        type=\"text\"\n                        placeholder=\"Enter your username\"\n                        value={loginData.username}\n                        onChange={(e) => setLoginData(prev => ({ ...prev, username: e.target.value }))}\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"login-password\">Password</Label>\n                      <Input\n                        id=\"login-password\"\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        value={loginData.password}\n                        onChange={(e) => setLoginData(prev => ({ ...prev, password: e.target.value }))}\n                        required\n                      />\n                    </div>\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                      disabled={login.isPending}\n                    >\n                      {login.isPending ? \"Signing In...\" : \"Sign In\"}\n                    </Button>\n                  </form>\n                </TabsContent>\n\n                <TabsContent value=\"register\" className=\"space-y-4\">\n                  <form onSubmit={handleRegister} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"invite-code\">Invite Code</Label>\n                      <Input\n                        id=\"invite-code\"\n                        type=\"text\"\n                        placeholder=\"Enter invite code\"\n                        value={registerData.inviteCode}\n                        onChange={(e) => setRegisterData(prev => ({ ...prev, inviteCode: e.target.value }))}\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"register-username\">Username</Label>\n                      <Input\n                        id=\"register-username\"\n                        type=\"text\"\n                        placeholder=\"Choose a username\"\n                        value={registerData.username}\n                        onChange={(e) => setRegisterData(prev => ({ ...prev, username: e.target.value }))}\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"register-password\">Password</Label>\n                      <Input\n                        id=\"register-password\"\n                        type=\"password\"\n                        placeholder=\"Create a password\"\n                        value={registerData.password}\n                        onChange={(e) => setRegisterData(prev => ({ ...prev, password: e.target.value }))}\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"confirm-password\">Confirm Password</Label>\n                      <Input\n                        id=\"confirm-password\"\n                        type=\"password\"\n                        placeholder=\"Confirm your password\"\n                        value={registerData.confirmPassword}\n                        onChange={(e) => setRegisterData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                        required\n                      />\n                    </div>\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-green-600 hover:bg-green-700\"\n                      disabled={register.isPending}\n                    >\n                      {register.isPending ? \"Creating Account...\" : \"Create Account\"}\n                    </Button>\n                  </form>\n                </TabsContent>\n              </Tabs>\n            </CardHeader>\n          </Card>\n        </div>\n\n        {/* Features Section */}\n        <div className=\"space-y-8\">\n          <div className=\"text-center lg:text-left\">\n            <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-4\">Platform Features</h2>\n            <p className=\"text-lg text-gray-600 dark:text-gray-400\">\n              Everything you need for secure digital commerce\n            </p>\n          </div>\n\n          <div className=\"grid gap-6\">\n            {mockFeatures.map((feature) => {\n              const IconComponent = feature.icon === \"shield-check\" ? Shield : \n                                  feature.icon === \"settings\" ? Settings : ShoppingBag;\n              \n              return (\n                <Card key={feature.id} className=\"border border-gray-200 dark:border-gray-800\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start space-x-4\">\n                      <div className={`w-12 h-12 ${feature.bgColor} rounded-lg flex items-center justify-center flex-shrink-0`}>\n                        <IconComponent className={`w-6 h-6 ${feature.iconColor}`} />\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-gray-900 dark:text-white mb-2\">\n                          {feature.title}\n                        </h3>\n                        <p className=\"text-gray-600 dark:text-gray-400\">\n                          {feature.description}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9023},"client/src/pages/Messages.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Send, MoreHorizontal, Search, MessageCircle } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { type Message } from \"@shared/schema\";\n\ninterface ConversationPreview {\n  id: string;\n  otherUser: string;\n  lastMessage: string;\n  timestamp: string;\n  unreadCount: number;\n  type: \"support\" | \"order\" | \"private\";\n  orderId?: string;\n}\n\nconst mockConversations: ConversationPreview[] = [\n  {\n    id: \"conv-1\",\n    otherUser: \"Support Team\",\n    lastMessage: \"Your order has been processed successfully\",\n    timestamp: \"2 min ago\",\n    unreadCount: 1,\n    type: \"support\",\n    orderId: \"order-123\"\n  },\n  {\n    id: \"conv-2\", \n    otherUser: \"Admin\",\n    lastMessage: \"Thank you for your purchase\",\n    timestamp: \"1 hour ago\",\n    unreadCount: 0,\n    type: \"order\",\n    orderId: \"order-456\"\n  },\n  {\n    id: \"conv-3\",\n    otherUser: \"Sales Department\",\n    lastMessage: \"We've received your refund request\",\n    timestamp: \"3 hours ago\",\n    unreadCount: 2,\n    type: \"support\"\n  }\n];\n\nconst mockMessages = [\n  {\n    id: \"msg-1\",\n    senderId: \"support-1\",\n    content: \"Hello! How can I help you today?\",\n    timestamp: \"10:30 AM\",\n    isOwn: false\n  },\n  {\n    id: \"msg-2\", \n    senderId: \"user-1\",\n    content: \"I have a question about my recent order\",\n    timestamp: \"10:32 AM\",\n    isOwn: true\n  },\n  {\n    id: \"msg-3\",\n    senderId: \"support-1\", \n    content: \"I'd be happy to help! Can you provide your order ID?\",\n    timestamp: \"10:33 AM\",\n    isOwn: false\n  },\n  {\n    id: \"msg-4\",\n    senderId: \"user-1\",\n    content: \"Sure, it's order-123\",\n    timestamp: \"10:34 AM\", \n    isOwn: true\n  },\n  {\n    id: \"msg-5\",\n    senderId: \"support-1\",\n    content: \"Your order has been processed successfully and is ready for download. You can find it in your profile under the Orders section.\",\n    timestamp: \"10:35 AM\",\n    isOwn: false\n  }\n];\n\nexport function Messages() {\n  const { user } = useAuth();\n  const [selectedConversation, setSelectedConversation] = useState<string>(\"conv-1\");\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const getConversationTypeBadge = (type: string) => {\n    switch (type) {\n      case \"support\":\n        return <Badge variant=\"secondary\" className=\"text-xs bg-blue-100 text-blue-800\">Support</Badge>;\n      case \"order\":\n        return <Badge variant=\"secondary\" className=\"text-xs bg-green-100 text-green-800\">Order</Badge>;\n      case \"private\":\n        return <Badge variant=\"secondary\" className=\"text-xs bg-gray-100 text-gray-800\">Private</Badge>;\n      default:\n        return null;\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  const handleSendMessage = () => {\n    if (!newMessage.trim()) return;\n    \n    // Here you would normally send the message to the backend\n    console.log(\"Sending message:\", newMessage);\n    setNewMessage(\"\");\n  };\n\n  const selectedConv = mockConversations.find(c => c.id === selectedConversation);\n\n  if (!user) {\n    return (\n      <div className=\"max-w-7xl mx-auto text-center py-12\">\n        <p className=\"text-gray-500\">Please log in to view your messages.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-full mx-auto px-3 md:px-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">Messages</h1>\n        <p className=\"text-lg text-gray-600 dark:text-gray-400\">\n          Communicate with support, sellers, and administrators\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-4 gap-6 h-[600px]\">\n        {/* Conversations List */}\n        <Card className=\"col-span-1\">\n          <CardContent className=\"p-0\">\n            {/* Search */}\n            <div className=\"p-4 border-b border-gray-200 dark:border-gray-800\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search conversations...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            {/* Conversation List */}\n            <div className=\"overflow-y-auto h-full\">\n              {mockConversations.map((conversation) => (\n                <div\n                  key={conversation.id}\n                  onClick={() => setSelectedConversation(conversation.id)}\n                  className={`p-4 border-b border-gray-100 dark:border-gray-800 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800 ${\n                    selectedConversation === conversation.id ? \"bg-blue-50 dark:bg-blue-900/20 border-l-4 border-l-blue-500\" : \"\"\n                  }`}\n                >\n                  <div className=\"flex items-start space-x-3\">\n                    <Avatar className=\"w-10 h-10\">\n                      <AvatarFallback className=\"bg-gray-100 text-gray-600 text-sm\">\n                        {getInitials(conversation.otherUser)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <h4 className=\"font-medium text-gray-900 dark:text-white text-sm truncate\">\n                          {conversation.otherUser}\n                        </h4>\n                        {conversation.unreadCount > 0 && (\n                          <Badge className=\"bg-blue-500 text-white text-xs w-5 h-5 flex items-center justify-center p-0\">\n                            {conversation.unreadCount}\n                          </Badge>\n                        )}\n                      </div>\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        {getConversationTypeBadge(conversation.type)}\n                        {conversation.orderId && (\n                          <span className=\"text-xs text-gray-500\">#{conversation.orderId.slice(-6)}</span>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 truncate\">\n                        {conversation.lastMessage}\n                      </p>\n                      <p className=\"text-xs text-gray-400 mt-1\">\n                        {conversation.timestamp}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Chat View */}\n        <Card className=\"col-span-3\">\n          <CardContent className=\"p-0 h-full flex flex-col\">\n            {selectedConv ? (\n              <>\n                {/* Chat Header */}\n                <div className=\"p-4 border-b border-gray-200 dark:border-gray-800 flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Avatar className=\"w-10 h-10\">\n                      <AvatarFallback className=\"bg-blue-100 text-blue-600\">\n                        {getInitials(selectedConv.otherUser)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <h3 className=\"font-medium text-gray-900 dark:text-white\">\n                        {selectedConv.otherUser}\n                      </h3>\n                      <div className=\"flex items-center space-x-2\">\n                        {getConversationTypeBadge(selectedConv.type)}\n                        {selectedConv.orderId && (\n                          <span className=\"text-sm text-gray-500\">Order #{selectedConv.orderId.slice(-6)}</span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <MoreHorizontal className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n\n                {/* Messages */}\n                <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n                  {mockMessages.map((message) => (\n                    <div\n                      key={message.id}\n                      className={`flex ${message.isOwn ? \"justify-end\" : \"justify-start\"}`}\n                    >\n                      <div\n                        className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                          message.isOwn\n                            ? \"bg-blue-500 text-white\"\n                            : \"bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white\"\n                        }`}\n                      >\n                        <p className=\"text-sm\">{message.content}</p>\n                        <p className={`text-xs mt-1 ${\n                          message.isOwn ? \"text-blue-100\" : \"text-gray-500 dark:text-gray-400\"\n                        }`}>\n                          {message.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Message Input */}\n                <div className=\"p-4 border-t border-gray-200 dark:border-gray-800\">\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Type your message…\"\n                      value={newMessage}\n                      onChange={(e) => setNewMessage(e.target.value)}\n                      onKeyPress={(e) => e.key === \"Enter\" && handleSendMessage()}\n                      className=\"flex-1\"\n                    />\n                    <Button \n                      onClick={handleSendMessage}\n                      disabled={!newMessage.trim()}\n                      className=\"bg-blue-600 hover:bg-blue-700\"\n                    >\n                      <Send className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </>\n            ) : (\n              <div className=\"flex-1 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <MessageCircle className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n                  <p className=\"text-gray-500 dark:text-gray-400\">\n                    Select a conversation to start messaging\n                  </p>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10995},"client/src/pages/MyOrders.tsx":{"content":"import React from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Package, Calendar, DollarSign, CheckCircle, Clock, AlertCircle, RefreshCw } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { type Order, type Product } from \"@shared/schema\";\n\ninterface OrderWithProduct extends Order {\n  product?: Product;\n}\n\nexport function MyOrders() {\n  const { user } = useAuth();\n\n  const { data: orders = [], isLoading, refetch } = useQuery<OrderWithProduct[]>({\n    queryKey: [`/api/orders/user/${user?.id}`],\n    enabled: !!user?.id,\n  });\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  // Merge orders with product details\n  const ordersWithProducts = orders.map(order => ({\n    ...order,\n    product: products.find(p => p.id === order.productId)\n  }));\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"delivered\":\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case \"processing\":\n        return <Clock className=\"w-4 h-4 text-yellow-500\" />;\n      case \"in_resolution\":\n        return <AlertCircle className=\"w-4 h-4 text-orange-500\" />;\n      case \"refunded\":\n        return <RefreshCw className=\"w-4 h-4 text-blue-500\" />;\n      default:\n        return <Package className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"delivered\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"processing\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case \"in_resolution\":\n        return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"refunded\":\n        return \"bg-blue-100 text-blue-800 border-blue-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const formatDate = (dateString: string | Date | null | undefined) => {\n    if (!dateString) return 'N/A';\n    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-full mx-auto px-3 md:px-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n            My Orders\n          </h1>\n          <p className=\"text-lg text-gray-600 dark:text-gray-400\">\n            Track your purchases and order history\n          </p>\n        </div>\n        <div className=\"space-y-4\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-16 h-16 bg-gray-200 rounded-lg\"></div>\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-full mx-auto px-3 md:px-6\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl md:text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n              My Orders\n            </h1>\n            <p className=\"text-base md:text-lg text-gray-600 dark:text-gray-400\">\n              Track your purchases and order history\n            </p>\n          </div>\n          <Button onClick={() => refetch()} variant=\"outline\">\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {ordersWithProducts.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <Package className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n            <h3 className=\"text-xl font-medium text-gray-900 dark:text-white mb-2\">\n              No orders yet\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n              Start shopping to see your orders here\n            </p>\n            <Button onClick={() => window.location.href = '/products'}>\n              Browse Products\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {ordersWithProducts.map((order) => (\n            <Card key={order.id} className=\"overflow-hidden\">\n              <CardHeader className=\"bg-gray-50 dark:bg-gray-800 border-b\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Package className=\"w-5 h-5 text-gray-600\" />\n                    <div>\n                      <CardTitle className=\"text-sm font-medium\">\n                        Order #{order.id.slice(-8).toUpperCase()}\n                      </CardTitle>\n                      <p className=\"text-xs text-gray-500\">\n                        Placed on {formatDate(order.createdAt)}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <Badge className={getStatusColor(order.status || 'processing')}>\n                      <div className=\"flex items-center space-x-1\">\n                        {getStatusIcon(order.status || 'processing')}\n                        <span className=\"capitalize\">{order.status || 'processing'}</span>\n                      </div>\n                    </Badge>\n                    <div className=\"text-right\">\n                      <div className=\"font-semibold\">{order.totalAmount}€</div>\n                      <div className=\"text-xs text-gray-500\">\n                        Qty: {order.quantity}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"p-6\">\n                {order.product ? (\n                  <div className=\"flex items-center space-x-4\">\n                    <img\n                      src={order.product.images?.[0] || \"https://via.placeholder.com/80x80\"}\n                      alt={order.product.title}\n                      className=\"w-16 h-16 object-cover rounded-lg border\"\n                    />\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium text-gray-900 dark:text-white\">\n                        {order.product.title}\n                      </h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                        {order.product.description}\n                      </p>\n                      <div className=\"flex items-center space-x-4 mt-2\">\n                        <Badge variant=\"secondary\">\n                          {order.product.category}\n                        </Badge>\n                        <span className=\"text-sm text-gray-500\">\n                          {order.product.price}€ each\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      {order.status === \"delivered\" && order.deliveredAt && (\n                        <div className=\"text-xs text-green-600\">\n                          <CheckCircle className=\"w-3 h-3 inline mr-1\" />\n                          Delivered {formatDate(order.deliveredAt)}\n                        </div>\n                      )}\n                      {order.status === \"processing\" && (\n                        <div className=\"text-xs text-yellow-600\">\n                          <Clock className=\"w-3 h-3 inline mr-1\" />\n                          Processing...\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-16 h-16 bg-gray-200 rounded-lg flex items-center justify-center\">\n                      <Package className=\"w-6 h-6 text-gray-400\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium text-gray-500\">\n                        Product no longer available\n                      </h3>\n                      <p className=\"text-sm text-gray-400\">\n                        This product may have been removed or discontinued\n                      </p>\n                    </div>\n                  </div>\n                )}\n\n                {order.orderData && (\n                  <div className=\"mt-4 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                    <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-2\">\n                      Order Details\n                    </h4>\n                    <pre className=\"text-xs text-gray-600 dark:text-gray-400 whitespace-pre-wrap\">\n                      {typeof order.orderData === 'object' && order.orderData !== null\n                        ? JSON.stringify(order.orderData, null, 2)\n                        : String(order.orderData || 'No additional details')\n                      }\n                    </pre>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":9814},"client/src/pages/ProductDetails.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useParams, useLocation } from \"wouter\";\nimport { ShoppingCart, Plus, Minus, Star, ArrowLeft, Tag } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useCart } from \"@/hooks/useCart\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MediaMarktGenerator } from \"@/components/generators/MediaMarktGenerator\";\nimport { type Product } from \"@shared/schema\";\n\nexport function ProductDetails() {\n  const params = useParams();\n  const productId = params.id as string;\n  const [quantity, setQuantity] = useState(1);\n  const [selectedImage, setSelectedImage] = useState(0);\n  const { addItem } = useCart();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // Generator-specific form data\n  const [generatorData, setGeneratorData] = useState({\n    companyName: \"\",\n    amount: \"\",\n    date: \"\",\n    description: \"\",\n    customerName: \"\",\n    address: \"\"\n  });\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const product = products.find(p => p.id === productId);\n\n  const handleAddToCart = () => {\n    if (!product) return;\n\n    addItem({\n      id: product.id,\n      title: product.title,\n      price: parseFloat(product.price),\n      image: product.images?.[0] || \"https://via.placeholder.com/300x200\",\n      type: product.type.replace(\"_\", \" \"),\n    });\n\n    toast({\n      title: \"Added to Cart\",\n      description: `${product.title} has been added to your cart.`,\n    });\n  };\n\n  const handleBuyNow = () => {\n    if (!product) return;\n\n    // Store product data in sessionStorage for checkout\n    const buyNowItem = {\n      id: product.id,\n      title: product.title,\n      price: parseFloat(product.price),\n      image: product.images?.[0] || \"https://via.placeholder.com/300x200\",\n      type: product.type.replace(\"_\", \" \"),\n      quantity: 1\n    };\n    \n    sessionStorage.setItem('buyNowItem', JSON.stringify(buyNowItem));\n    \n    // Navigate directly to checkout without adding to cart\n    setLocation(\"/checkout?buyNow=true\");\n  };\n\n  const isGenerator = product?.category === \"generator\";\n  const hasStock = product?.stock === null || (product?.stock && product.stock > 0);\n\n  if (!product) {\n    return (\n      <div className=\"max-w-full mx-auto px-3 md:px-6 text-center py-12\">\n        <p className=\"text-gray-500\">Product not found.</p>\n        <Link href=\"/shop\">\n          <Button className=\"mt-4\">Back to Shop</Button>\n        </Link>\n      </div>\n    );\n  }\n\n  // Show MediaMarkt Generator for MediaMarkt product\n  if (product.id === \"prod-6\") {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"mb-6\">\n            <Link href=\"/generators\">\n              <Button variant=\"outline\" className=\"mb-4\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Generators\n              </Button>\n            </Link>\n          </div>\n          <MediaMarktGenerator />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-full mx-auto px-3 md:px-6\">\n      <Link href=\"/shop\">\n        <Button variant=\"ghost\" className=\"mb-6\">\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back to Shop\n        </Button>\n      </Link>\n\n      <div className=\"grid lg:grid-cols-2 gap-12\">\n        {/* Product Images */}\n        <div className=\"space-y-4\">\n          <div className=\"aspect-square rounded-lg overflow-hidden bg-gray-100\">\n            <img\n              src={product.images?.[selectedImage] || \"https://via.placeholder.com/600x600\"}\n              alt={product.title}\n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n          \n          {product.images && product.images.length > 1 && (\n            <div className=\"flex space-x-2 overflow-x-auto\">\n              {product.images.map((image, index) => (\n                <button\n                  key={index}\n                  onClick={() => setSelectedImage(index)}\n                  className={`flex-shrink-0 w-20 h-20 rounded-lg overflow-hidden border-2 ${\n                    selectedImage === index ? \"border-blue-500\" : \"border-gray-200\"\n                  }`}\n                >\n                  <img src={image} alt={`${product.title} ${index + 1}`} className=\"w-full h-full object-cover\" />\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Product Details and Form */}\n        <div className=\"space-y-6\">\n          <div>\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {product.category}\n              </Badge>\n              {product.tags?.map((tag) => (\n                <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n                  <Tag className=\"w-3 h-3 mr-1\" />\n                  {tag}\n                </Badge>\n              ))}\n            </div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n              {product.title}\n            </h1>\n            <p className=\"text-lg text-gray-600 dark:text-gray-400 mb-6\">\n              {product.description}\n            </p>\n            <div className=\"flex items-baseline space-x-2 mb-6\">\n              <span className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n                {product.price}€\n              </span>\n              {product.stock !== null && (\n                <span className=\"text-sm text-gray-500\">\n                  {product.stock} in stock\n                </span>\n              )}\n            </div>\n          </div>\n\n          {/* Generator Form Fields */}\n          {isGenerator && (\n            <Card>\n              <CardContent className=\"p-6 space-y-4\">\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                  Generator Details\n                </h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"companyName\">Company Name</Label>\n                    <Input\n                      id=\"companyName\"\n                      value={generatorData.companyName}\n                      onChange={(e) => setGeneratorData(prev => ({ ...prev, companyName: e.target.value }))}\n                      placeholder=\"Enter company name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"amount\">Amount</Label>\n                    <Input\n                      id=\"amount\"\n                      value={generatorData.amount}\n                      onChange={(e) => setGeneratorData(prev => ({ ...prev, amount: e.target.value }))}\n                      placeholder=\"Enter amount\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"date\">Date</Label>\n                    <Input\n                      id=\"date\"\n                      type=\"date\"\n                      value={generatorData.date}\n                      onChange={(e) => setGeneratorData(prev => ({ ...prev, date: e.target.value }))}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"customerName\">Customer Name</Label>\n                    <Input\n                      id=\"customerName\"\n                      value={generatorData.customerName}\n                      onChange={(e) => setGeneratorData(prev => ({ ...prev, customerName: e.target.value }))}\n                      placeholder=\"Enter customer name\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={generatorData.description}\n                    onChange={(e) => setGeneratorData(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Enter description or notes\"\n                    rows={3}\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"address\">Address</Label>\n                  <Textarea\n                    id=\"address\"\n                    value={generatorData.address}\n                    onChange={(e) => setGeneratorData(prev => ({ ...prev, address: e.target.value }))}\n                    placeholder=\"Enter billing address\"\n                    rows={2}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Purchase Options */}\n          <Card>\n            <CardContent className=\"p-6\">\n              {!isGenerator && (\n                <div className=\"flex items-center space-x-4 mb-6\">\n                  <Label htmlFor=\"quantity\">Quantity:</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                      disabled={quantity <= 1}\n                    >\n                      <Minus className=\"w-4 h-4\" />\n                    </Button>\n                    <span className=\"w-12 text-center\">{quantity}</span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setQuantity(quantity + 1)}\n                      disabled={product.maxPerUser !== null && product.maxPerUser !== undefined && quantity >= product.maxPerUser}\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  {product.maxPerUser && (\n                    <span className=\"text-sm text-gray-500\">\n                      Max {product.maxPerUser} per user\n                    </span>\n                  )}\n                </div>\n              )}\n\n              <div className=\"flex space-x-4\">\n                <Button\n                  onClick={handleAddToCart}\n                  disabled={!hasStock}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                  Add to Cart\n                </Button>\n                <Button\n                  onClick={handleBuyNow}\n                  disabled={!hasStock}\n                  className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n                >\n                  Buy Now\n                </Button>\n              </div>\n\n              {!hasStock && (\n                <p className=\"text-red-600 text-sm mt-2 text-center\">\n                  This item is currently out of stock\n                </p>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Product Info */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                Product Information\n              </h3>\n              <dl className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <dt className=\"text-gray-600 dark:text-gray-400\">Type:</dt>\n                  <dd className=\"font-medium\">{product.type.replace(\"_\", \" \")}</dd>\n                </div>\n                <div className=\"flex justify-between\">\n                  <dt className=\"text-gray-600 dark:text-gray-400\">Category:</dt>\n                  <dd className=\"font-medium\">{product.category}</dd>\n                </div>\n                {product.subcategory && (\n                  <div className=\"flex justify-between\">\n                    <dt className=\"text-gray-600 dark:text-gray-400\">Subcategory:</dt>\n                    <dd className=\"font-medium\">{product.subcategory}</dd>\n                  </div>\n                )}\n                <div className=\"flex justify-between\">\n                  <dt className=\"text-gray-600 dark:text-gray-400\">Delivery:</dt>\n                  <dd className=\"font-medium\">Instant Digital Download</dd>\n                </div>\n              </dl>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12679},"client/src/pages/ProductListing.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Filter, ShoppingCart } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useCart } from \"@/hooks/useCart\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type Product } from \"@shared/schema\";\n\nexport function ProductListing() {\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [selectedFilters, setSelectedFilters] = useState<string[]>([]);\n  const { addItem } = useCart();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const filterOptions = [\"free\", \"paid\", \"germany\", \"europe\", \"printable\", \"photorealistic\"];\n\n  const filteredProducts = products.filter(product => {\n    if (selectedCategory !== \"all\" && product.category !== selectedCategory) {\n      return false;\n    }\n    \n    if (selectedFilters.length > 0) {\n      const hasMatchingTag = selectedFilters.some(filter => \n        product.tags?.includes(filter)\n      );\n      if (!hasMatchingTag) return false;\n    }\n    \n    return true;\n  });\n\n  const handleAddToCart = (product: Product) => {\n    addItem({\n      id: product.id,\n      title: product.title,\n      price: parseFloat(product.price),\n      image: product.images?.[0] || \"https://via.placeholder.com/300x200\",\n      type: product.type.replace(\"_\", \" \"),\n    });\n    \n    toast({\n      title: \"Added to Cart\",\n      description: `${product.title} has been added to your cart.`,\n    });\n  };\n\n  const handleBuyNow = (product: Product) => {\n    // Store product data in sessionStorage for checkout\n    const buyNowItem = {\n      id: product.id,\n      title: product.title,\n      price: parseFloat(product.price),\n      image: product.images?.[0] || \"https://via.placeholder.com/300x200\",\n      type: product.type.replace(\"_\", \" \"),\n      quantity: 1\n    };\n    \n    sessionStorage.setItem('buyNowItem', JSON.stringify(buyNowItem));\n    \n    // Navigate directly to checkout without adding to cart\n    setLocation(\"/checkout?buyNow=true\");\n  };\n\n  const toggleFilter = (filter: string) => {\n    setSelectedFilters(prev => \n      prev.includes(filter) \n        ? prev.filter(f => f !== filter)\n        : [...prev, filter]\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-full mx-auto px-3 md:px-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 md:gap-6\">\n          {[...Array(8)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <div className=\"h-48 bg-gray-300\"></div>\n              <CardContent className=\"p-4 space-y-3\">\n                <div className=\"h-4 bg-gray-300 rounded w-3/4\"></div>\n                <div className=\"h-3 bg-gray-300 rounded w-1/2\"></div>\n                <div className=\"h-8 bg-gray-300 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-full mx-auto px-3 md:px-6\">\n      {/* Page Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl md:text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n          Digital Marketplace\n        </h1>\n        <p className=\"text-base md:text-lg text-gray-600 dark:text-gray-400\">\n          Browse and purchase premium digital products, software licenses, and exclusive content.\n        </p>\n      </div>\n\n      {/* Filters Bar */}\n      <Card className=\"mb-8\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-wrap items-center gap-4\">\n            <div className=\"flex items-center space-x-2\">\n              <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Category:</label>\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"shop\">Shop</SelectItem>\n                  <SelectItem value=\"generator\">Generators</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex items-center space-x-2 flex-wrap\">\n              {filterOptions.map(filter => (\n                <Button\n                  key={filter}\n                  variant={selectedFilters.includes(filter) ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => toggleFilter(filter)}\n                  className=\"text-xs\"\n                >\n                  {filter}\n                </Button>\n              ))}\n            </div>\n\n            <Button variant=\"outline\" size=\"sm\" className=\"ml-auto\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              More Filters\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Product Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 md:gap-6\">\n        {filteredProducts.map((product) => (\n          <Card key={product.id} className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n            <Link href={`/product/${product.id}`}>\n              <img \n                src={product.images?.[0] || \"https://via.placeholder.com/300x200\"}\n                alt={product.title}\n                className=\"w-full h-48 object-cover cursor-pointer\"\n              />\n            </Link>\n            <CardContent className=\"p-4\">\n              <Link href={`/product/${product.id}`}>\n                <h3 className=\"font-semibold text-gray-900 dark:text-white mb-2 cursor-pointer hover:text-blue-600\">\n                  {product.title}\n                </h3>\n              </Link>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3 line-clamp-2\">\n                {product.description}\n              </p>\n              \n              {product.tags && product.tags.length > 0 && (\n                <div className=\"flex flex-wrap gap-1 mb-3\">\n                  {product.tags.map((tag) => (\n                    <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                      {tag}\n                    </Badge>\n                  ))}\n                </div>\n              )}\n\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-lg font-bold text-gray-900 dark:text-white\">\n                  {product.price}€\n                </span>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleAddToCart(product)}\n                  >\n                    <ShoppingCart className=\"w-4 h-4\" />\n                  </Button>\n                  <Button \n                    size=\"sm\"\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                    onClick={() => handleBuyNow(product)}\n                  >\n                    Buy Now\n                  </Button>\n                </div>\n              </div>\n\n              {product.stock !== null && (\n                <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  Stock: {product.stock} available\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredProducts.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-gray-500 dark:text-gray-400\">\n            No products found matching your criteria.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":8048},"client/src/pages/Profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { type Transaction, type Order, type Product } from \"@shared/schema\";\nimport { Plus, Minus, RefreshCw, Wallet, User, Settings, Shield, Lock, Phone, Download, Copy, Eye, CheckCircle, AlertCircle, MessageCircle, ArrowUpRight, ArrowDownLeft, Bitcoin, DollarSign } from \"lucide-react\";\nimport { BitcoinIcon, LitecoinIcon, MoneroIcon } from \"@/components/icons/CryptoIcons\";\nimport { OrderDetailsModal } from \"@/components/OrderDetailsModal\";\n\nexport function Profile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n  const [isOrderModalOpen, setIsOrderModalOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(() => {\n    // Initialize with tab from URL params if available\n    const searchParams = new URLSearchParams(window.location.search);\n    const tab = searchParams.get('tab');\n    return (tab && ['orders', 'balance', 'transactions', 'settings'].includes(tab)) ? tab : 'orders';\n  });\n\n  const [orderFilter, setOrderFilter] = useState(\"all\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [showTotpSetup, setShowTotpSetup] = useState(false);\n  const [qrCode, setQrCode] = useState(\"\");\n  const [totpToken, setTotpToken] = useState(\"\");\n  const [totpSecret, setTotpSecret] = useState(\"\");\n  const [isTotpEnabled, setIsTotpEnabled] = useState(false);\n  const [contactMethods, setContactMethods] = useState({\n    telegram: (user as any)?.telegramUsername || \"\",\n    threema: (user as any)?.threemaUsername || \"\",\n    signal: (user as any)?.signalUsername || \"\",\n    session: (user as any)?.sessionUsername || \"\"\n  });\n\n  // Update TOTP status when user data changes\n  React.useEffect(() => {\n    if (user) {\n      setIsTotpEnabled((user as any)?.totpEnabled || false);\n    }\n  }, [user]);\n\n  const { data: transactions = [] } = useQuery<Transaction[]>({\n    queryKey: [\"/api/transactions/user\", user?.id],\n    enabled: !!user?.id,\n  });\n\n  const { data: orders = [] } = useQuery<Order[]>({\n    queryKey: [\"/api/orders/user\", user?.id],\n    enabled: !!user?.id,\n  });\n\n  // Handle URL search params for direct tab navigation\n  useEffect(() => {\n    const searchParams = new URLSearchParams(window.location.search);\n    const tab = searchParams.get('tab');\n    const orderId = searchParams.get('order');\n    \n    if (tab && ['orders', 'balance', 'transactions', 'settings'].includes(tab)) {\n      setActiveTab(tab);\n    }\n    \n    // If there's a specific order ID, open that order's details\n    if (orderId && orders.length > 0) {\n      const order = orders.find(o => o.id === orderId);\n      if (order) {\n        handleOrderDetails(order);\n      }\n    }\n  }, [orders]);\n\n  // Listen for URL changes (including programmatic navigation)\n  useEffect(() => {\n    const handleUrlChange = () => {\n      const searchParams = new URLSearchParams(window.location.search);\n      const tab = searchParams.get('tab');\n      if (tab && ['orders', 'balance', 'transactions', 'settings'].includes(tab)) {\n        setActiveTab(tab);\n      }\n    };\n\n    // Listen for browser back/forward\n    window.addEventListener('popstate', handleUrlChange);\n    \n    // Listen for programmatic navigation (like clicking the wallet)\n    const originalPushState = history.pushState;\n    const originalReplaceState = history.replaceState;\n    \n    history.pushState = function(...args) {\n      originalPushState.apply(history, args);\n      handleUrlChange();\n    };\n    \n    history.replaceState = function(...args) {\n      originalReplaceState.apply(history, args);\n      handleUrlChange();\n    };\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('popstate', handleUrlChange);\n      history.pushState = originalPushState;\n      history.replaceState = originalReplaceState;\n    };\n  }, []);\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const getProductDetails = (productId: string) => {\n    return products.find(p => p.id === productId);\n  };\n\n  const handleOrderDetails = (order: Order) => {\n    const product = getProductDetails(order.productId);\n    setSelectedOrder(order);\n    setSelectedProduct(product || null);\n    setIsOrderModalOpen(true);\n  };\n\n  const handleSupportMessage = (orderId: string) => {\n    // Navigate to messages and create support conversation\n    setLocation(`/messages?new=support&order=${orderId}`);\n    setIsOrderModalOpen(false);\n  };\n\n  const handleRefundRequest = (orderId: string) => {\n    // Navigate to messages and create refund conversation\n    setLocation(`/messages?new=refund&order=${orderId}`);\n    setIsOrderModalOpen(false);\n  };\n\n  // Filter orders based on selected filter\n  const filteredOrders = orders.filter(order => {\n    if (orderFilter === \"all\") return true;\n    if (orderFilter === \"delivered\") return order.status === \"delivered\";\n    if (orderFilter === \"processing\") return order.status === \"processing\";\n    if (orderFilter === \"in_resolution\") return order.status === \"in_resolution\";\n    if (orderFilter === \"refunded\") return order.status === \"refunded\";\n    return true;\n  });\n\n  const getTransactionIcon = (type: string) => {\n    switch (type) {\n      case \"deposit\":\n        return <ArrowDownLeft className=\"w-4 h-4\" />;\n      case \"purchase\":\n        return <ArrowUpRight className=\"w-4 h-4\" />;\n      case \"refund\":\n        return <RefreshCw className=\"w-4 h-4\" />;\n      default:\n        return <DollarSign className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getTransactionColor = (type: string) => {\n    switch (type) {\n      case \"deposit\":\n        return \"text-green-600 bg-green-100\";\n      case \"purchase\":\n        return \"text-red-600 bg-red-100\";\n      case \"refund\":\n        return \"text-orange-600 bg-orange-100\";\n      default:\n        return \"text-gray-600 bg-gray-100\";\n    }\n  };\n\n  const getAmountColor = (type: string) => {\n    switch (type) {\n      case \"deposit\":\n        return \"text-green-600\";\n      case \"purchase\":\n        return \"text-red-600\";\n      case \"refund\":\n        return \"text-orange-600\";\n      default:\n        return \"text-gray-600\";\n    }\n  };\n\n  const formatDate = (dateString: string | Date | null | undefined) => {\n    if (!dateString) return 'N/A';\n    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;\n    const day = date.getDate().toString().padStart(2, '0');\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const year = date.getFullYear().toString().slice(-2);\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${day}.${month}.${year} ${hours}:${minutes}`;\n  };\n\n  const handleContactMethodsUpdate = async () => {\n    if (!user?.id) {\n      toast({\n        title: \"Error\",\n        description: \"User not found. Please log in again.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      const response = await apiRequest(\"PUT\", `/api/users/${user.id}`, {\n        telegramUsername: contactMethods.telegram,\n        threemaUsername: contactMethods.threema,\n        signalUsername: contactMethods.signal,\n        sessionUsername: contactMethods.session\n      });\n\n      if (response.ok) {\n        // Invalidate user cache to refresh data\n        queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n        \n        toast({\n          title: \"Success\",\n          description: \"Contact methods have been updated successfully.\"\n        });\n      } else {\n        throw new Error(\"Failed to update contact methods\");\n      }\n    } catch (error) {\n      console.error(\"Contact methods update error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update contact methods. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handlePasswordUpdate = async () => {\n    if (newPassword !== confirmPassword) {\n      toast({\n        title: \"Error\", \n        description: \"Passwords do not match\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (!user?.id) {\n      toast({\n        title: \"Error\",\n        description: \"User not found. Please log in again.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      const response = await apiRequest(\"PUT\", `/api/users/${user.id}`, {\n        password: newPassword\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Password has been updated successfully.\"\n        });\n        setNewPassword(\"\");\n        setConfirmPassword(\"\");\n      } else {\n        throw new Error(\"Failed to update password\");\n      }\n    } catch (error) {\n      console.error(\"Password update error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update password. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleTotpSetup = async () => {\n    if (!user?.id) {\n      toast({\n        title: \"Error\",\n        description: \"User not found. Please log in again.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/totp/setup\", {\n        userId: user.id\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setQrCode(data.qrCode);\n        setTotpSecret(data.secret);\n        setShowTotpSetup(true);\n      } else {\n        throw new Error(\"Failed to setup TOTP\");\n      }\n    } catch (error) {\n      console.error(\"TOTP setup error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to setup TOTP. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleTotpVerify = async () => {\n    if (!user?.id || !totpToken) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter the verification code.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/totp/verify\", {\n        userId: user.id,\n        token: totpToken\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Two-factor authentication has been enabled successfully!\"\n        });\n        setShowTotpSetup(false);\n        setIsTotpEnabled(true);\n        setTotpToken(\"\");\n        setQrCode(\"\");\n        setTotpSecret(\"\");\n        \n        // Refresh user data\n        queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      } else {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Invalid verification code\");\n      }\n    } catch (error) {\n      console.error(\"TOTP verify error:\", error);\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to verify TOTP code.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleTotpDisable = async () => {\n    if (!user?.id) {\n      toast({\n        title: \"Error\",\n        description: \"User not found. Please log in again.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/totp/disable\", {\n        userId: user.id\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Two-factor authentication has been disabled.\"\n        });\n        setIsTotpEnabled(false);\n        \n        // Refresh user data\n        queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      } else {\n        throw new Error(\"Failed to disable TOTP\");\n      }\n    } catch (error) {\n      console.error(\"TOTP disable error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to disable TOTP. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  if (!user) {\n    return (\n      <div className=\"max-w-full mx-auto px-0 xl:px-6 text-center py-12\">\n        <p className=\"text-gray-500\">Please log in to view your profile.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-full mx-auto px-0 xl:px-6\">\n      <div className=\"mb-4 xl:mb-8 px-3 xl:px-0\">\n        <h1 className=\"text-2xl xl:text-3xl font-bold text-gray-900 dark:text-white mb-2\">My Account</h1>\n        <p className=\"text-base xl:text-lg text-gray-600 dark:text-gray-400\">\n          Manage your account, orders, and settings\n        </p>\n      </div>\n\n      <Card>\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <div className=\"border-b border-gray-200 dark:border-gray-800\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"orders\">Orders</TabsTrigger>\n              <TabsTrigger value=\"balance\">Balance</TabsTrigger>\n              <TabsTrigger value=\"transactions\">Transactions</TabsTrigger>\n              <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n            </TabsList>\n          </div>\n\n          {/* Orders Tab */}\n          <TabsContent value=\"orders\" className=\"p-3 xl:p-6\">\n            <div className=\"space-y-6\">\n              {/* Filter */}\n              <div className=\"flex items-center space-x-4\">\n                <Label htmlFor=\"order-filter\" className=\"text-sm font-medium\">Filter:</Label>\n                <Select value={orderFilter} onValueChange={setOrderFilter}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Orders</SelectItem>\n                    <SelectItem value=\"delivered\">Generated/Delivered</SelectItem>\n                    <SelectItem value=\"processing\">Generating/Shipping</SelectItem>\n                    <SelectItem value=\"in_resolution\">In Resolution</SelectItem>\n                    <SelectItem value=\"refunded\">Refunded</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Orders List */}\n              <div className=\"space-y-2\">\n                {filteredOrders.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    No orders found\n                  </div>\n                ) : (\n                  filteredOrders.map((order) => {\n                    const product = getProductDetails(order.productId);\n                    const statusText = order.status === \"delivered\" ? \"Delivered\" : \n                                     order.status === \"processing\" ? \"Processing\" :\n                                     order.status === \"in_resolution\" ? \"In Resolution\" : \n                                     order.status === \"refunded\" ? \"Refunded\" : \"Unknown\";\n                    \n                    return (\n                      <Card key={order.id} className=\"border\">\n                        <CardContent className=\"p-3 md:p-4\">\n                          <div className=\"flex items-start justify-between\">\n                            {/* Left side - Product and Order info */}\n                            <div className=\"flex-1\">\n                              {/* Product Title */}\n                              <h3 className=\"font-semibold text-gray-900 dark:text-white mb-1\">\n                                {product?.title || \"Unknown Product\"}\n                              </h3>\n                              \n                              {/* Two-line layout */}\n                              <div className=\"space-y-1\">\n                                {/* First line: Placed on date */}\n                                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                                  Placed on {order.createdAt ? new Date(order.createdAt).toLocaleDateString('en-US', { \n                                    year: 'numeric', \n                                    month: 'short', \n                                    day: 'numeric', \n                                    hour: '2-digit', \n                                    minute: '2-digit',\n                                    hour12: true\n                                  }) : 'N/A'}\n                                </div>\n                                \n                                {/* Second line: Status and updated date */}\n                                <div className=\"text-sm\">\n                                  <span className=\"font-medium\">\n                                    {statusText} {order.deliveredAt ? new Date(order.deliveredAt).toLocaleDateString('en-US', { \n                                      year: 'numeric', \n                                      month: 'short', \n                                      day: 'numeric', \n                                      hour: '2-digit', \n                                      minute: '2-digit',\n                                      hour12: true\n                                    }) : (order.createdAt ? new Date(order.createdAt).toLocaleDateString('en-US', { \n                                      year: 'numeric', \n                                      month: 'short', \n                                      day: 'numeric', \n                                      hour: '2-digit', \n                                      minute: '2-digit',\n                                      hour12: true\n                                    }) : 'N/A')}\n                                  </span>\n                                </div>\n                              </div>\n                              \n                              {/* Order ID - Mobile only */}\n                              <div className=\"md:hidden text-xs text-gray-500 mt-2\">\n                                Order #{order.id.slice(-8)}\n                              </div>\n                            </div>\n                            \n                            {/* Right side - Action Buttons */}\n                            <div className=\"ml-4 flex flex-col items-end space-y-2\">\n                              {/* Status Badge */}\n                              <div>\n                                {order.status === \"delivered\" && (\n                                  <div className=\"flex items-center space-x-2\">\n                                    <span className=\"text-xs text-gray-500 font-mono\">#{order.id.slice(-8)}</span>\n                                    <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n                                      <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                      Delivered\n                                    </Badge>\n                                  </div>\n                                )}\n                                {order.status === \"processing\" && (\n                                  <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-200\">\n                                    Processing\n                                  </Badge>\n                                )}\n                                {order.status === \"in_resolution\" && (\n                                  <Badge className=\"bg-orange-100 text-orange-800 border-orange-200\">\n                                    In Resolution\n                                  </Badge>\n                                )}\n                                {order.status === \"refunded\" && (\n                                  <Badge className=\"bg-red-100 text-red-800 border-red-200\">\n                                    Refunded\n                                  </Badge>\n                                )}\n                              </div>\n                              \n                              {/* Action Buttons */}\n                              <div className=\"flex space-x-1 md:space-x-2 flex-wrap justify-end\">\n                                {order.status === \"delivered\" && (\n                                  <Button className=\"bg-blue-600 hover:bg-blue-700 px-3 py-1.5\">\n                                    <Download className=\"w-4 h-4\" />\n                                  </Button>\n                                )}\n                                <Button variant=\"outline\" className=\"py-2\"\n                                  onClick={() => handleSupportMessage(order.id)}>\n                                  <MessageCircle className=\"w-3 h-3 mr-1\" />\n                                  Support\n                                </Button>\n                                {order.status === \"delivered\" ? (\n                                  <Button variant=\"outline\" className=\"text-green-600 border-green-200 py-2\">\n                                    <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                    <span className=\"text-xs\">Mark Received</span>\n                                  </Button>\n                                ) : order.status === \"in_resolution\" ? (\n                                  <Button variant=\"outline\" className=\"text-orange-600 border-orange-200 py-2\">\n                                    <AlertCircle className=\"w-3 h-3 mr-1\" />\n                                    <span className=\"text-xs\">In Resolution</span>\n                                  </Button>\n                                ) : (\n                                  <Button variant=\"outline\" className=\"text-red-600 border-red-200 py-2\"\n                                    onClick={() => handleRefundRequest(order.id)}>\n                                    <RefreshCw className=\"w-3 h-3 mr-1\" />\n                                    <span className=\"text-xs\">Request Refund</span>\n                                  </Button>\n                                )}\n                                <Button variant=\"outline\" className=\"px-3 py-2\"\n                                  onClick={() => handleOrderDetails(order)}>\n                                  <Eye className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Balance Tab */}\n          <TabsContent value=\"balance\" className=\"p-3 xl:p-6\">\n            <div className=\"space-y-6\">\n              {/* Current Balance */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Wallet className=\"w-5 h-5\" />\n                    <span>Current Balance</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl md:text-4xl font-bold text-green-600 mb-4 font-inter\">\n                    €{parseFloat(user?.balance || \"0\").toFixed(2)}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Deposit Options */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Deposit Cryptocurrency</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <Button variant=\"outline\" className=\"py-4 md:py-6 hover:bg-gray-50 dark:hover:bg-gray-800\">\n                      <BitcoinIcon className=\"w-5 h-5 mr-2\" />\n                      Deposit BTC\n                    </Button>\n                    <Button variant=\"outline\" className=\"py-4 md:py-6 hover:bg-gray-50 dark:hover:bg-gray-800\">\n                      <LitecoinIcon className=\"w-5 h-5 mr-2\" />\n                      Deposit LTC\n                    </Button>\n                    <Button variant=\"outline\" className=\"py-4 md:py-6 hover:bg-gray-50 dark:hover:bg-gray-800\">\n                      <MoneroIcon className=\"w-5 h-5 mr-2\" />\n                      Deposit XMR\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Transactions Tab */}\n          <TabsContent value=\"transactions\" className=\"p-3 xl:p-6\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Transaction History</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {transactions.map((transaction) => (\n                      <div key={transaction.id} className=\"flex items-center justify-between p-4 border border-gray-200 dark:border-gray-800 rounded-lg\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className={`w-10 h-10 rounded-full flex items-center justify-center ${getTransactionColor(transaction.type)}`}>\n                            {getTransactionIcon(transaction.type)}\n                          </div>\n                          <div>\n                            <p className=\"font-semibold text-gray-900 dark:text-white\">\n                              {transaction.description || `${transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1)} Transaction`}\n                            </p>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                              {transaction.type === \"deposit\" ? \"Cryptocurrency deposit\" : \n                               transaction.type === \"purchase\" ? \"Product purchase\" : \"Refund processed\"}\n                            </p>\n                            <p className=\"text-xs text-gray-500\">\n                              {formatDate(transaction.createdAt)}\n                            </p>\n                          </div>\n                        </div>\n                        <div className={`text-lg font-bold ${getAmountColor(transaction.type)}`}>\n                          {transaction.type === \"deposit\" ? \"+\" : \n                           transaction.type === \"refund\" ? \"+\" : \"-\"}{Math.abs(parseFloat(transaction.amount)).toFixed(2)}€\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Settings Tab */}\n          <TabsContent value=\"settings\" className=\"p-3 xl:p-6\">\n            <div className=\"space-y-6\">\n              {/* Account Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <User className=\"w-5 h-5\" />\n                    <span>Account Information</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"username\">Username (can't be changed)</Label>\n                    <Input \n                      id=\"username\" \n                      value={user?.username || \"\"} \n                      disabled \n                      className=\"bg-gray-100 dark:bg-gray-800\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"publicName\">Public Name (can't be changed)</Label>\n                    <Input \n                      id=\"publicName\" \n                      value={(user as any)?.publicName || \"\"} \n                      disabled \n                      className=\"bg-gray-100 dark:bg-gray-800\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"newPassword\">New Password</Label>\n                    <Input \n                      id=\"newPassword\" \n                      type=\"password\" \n                      value={newPassword}\n                      onChange={(e) => setNewPassword(e.target.value)}\n                      placeholder=\"Enter new password\" \n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                    <Input \n                      id=\"confirmPassword\" \n                      type=\"password\" \n                      value={confirmPassword}\n                      onChange={(e) => setConfirmPassword(e.target.value)}\n                      placeholder=\"Confirm new password\" \n                    />\n                  </div>\n                  <Button \n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                    onClick={handlePasswordUpdate}\n                    disabled={!newPassword || !confirmPassword}\n                  >\n                    Update Password\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Security */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Shield className=\"w-5 h-5\" />\n                    <span>Security</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Button \n                    variant=\"outline\"\n                    onClick={() => setLocation(\"/totp-generator\")}\n                  >\n                    <Lock className=\"w-4 h-4 mr-2\" />\n                    Setup Two-Factor Authentication (TOTP)\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Contact Methods */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Phone className=\"w-5 h-5\" />\n                    <span>Contact Methods for Moderation & Administrators</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"telegram\">Telegram Username</Label>\n                    <Input \n                      id=\"telegram\" \n                      value={contactMethods.telegram}\n                      onChange={(e) => setContactMethods(prev => ({ ...prev, telegram: e.target.value }))}\n                      placeholder=\"@username\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"threema\">Threema Username</Label>\n                    <Input \n                      id=\"threema\" \n                      value={contactMethods.threema}\n                      onChange={(e) => setContactMethods(prev => ({ ...prev, threema: e.target.value }))}\n                      placeholder=\"ABCDEFGH\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"signal\">Signal Username</Label>\n                    <Input \n                      id=\"signal\" \n                      value={contactMethods.signal}\n                      onChange={(e) => setContactMethods(prev => ({ ...prev, signal: e.target.value }))}\n                      placeholder=\"username.01\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"session\">Session Username</Label>\n                    <Input \n                      id=\"session\" \n                      value={contactMethods.session}\n                      onChange={(e) => setContactMethods(prev => ({ ...prev, session: e.target.value }))}\n                      placeholder=\"username\"\n                    />\n                  </div>\n                  <Button \n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                    onClick={handleContactMethodsUpdate}\n                  >\n                    Save Contact Methods\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Logout */}\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <Button variant=\"destructive\">\n                    Logout\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </Card>\n\n      {/* Order Details Modal */}\n      <OrderDetailsModal\n        order={selectedOrder}\n        product={selectedProduct}\n        isOpen={isOrderModalOpen}\n        onClose={() => setIsOrderModalOpen(false)}\n        onSupportClick={handleSupportMessage}\n        onRefundClick={handleRefundRequest}\n      />\n    </div>\n  );\n}","size_bytes":33409},"client/src/pages/TotpGenerator.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Shield, Plus, X, Copy, Download, Upload, RefreshCw } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface TotpSecret {\n  id: string;\n  serviceName: string;\n  secretKey: string;\n  code: string;\n  timeRemaining: number;\n}\n\n// Simple TOTP implementation for demo purposes\nfunction generateTOTP(secret: string): { code: string; timeRemaining: number } {\n  // This is a simplified TOTP generator for demo purposes\n  // In a real app, you'd use a proper crypto library\n  const timeStep = 30;\n  const now = Math.floor(Date.now() / 1000);\n  const counter = Math.floor(now / timeStep);\n  const timeRemaining = timeStep - (now % timeStep);\n  \n  // Generate a 6-digit code based on the secret and counter\n  const hash = (secret + counter).split('').reduce((a, b) => {\n    a = ((a << 5) - a) + b.charCodeAt(0);\n    return a & a;\n  }, 0);\n  \n  const code = String(Math.abs(hash) % 1000000).padStart(6, '0');\n  \n  return { code, timeRemaining };\n}\n\nexport function TotpGenerator() {\n  const [serviceName, setServiceName] = useState(\"\");\n  const [secretKey, setSecretKey] = useState(\"\");\n  const [secrets, setSecrets] = useState<TotpSecret[]>([]);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Load secrets from localStorage\n    const saved = localStorage.getItem('totp-secrets');\n    if (saved) {\n      setSecrets(JSON.parse(saved));\n    }\n  }, []);\n\n  useEffect(() => {\n    // Update TOTP codes every second\n    const interval = setInterval(() => {\n      setSecrets(prevSecrets => \n        prevSecrets.map(secret => {\n          const { code, timeRemaining } = generateTOTP(secret.secretKey);\n          return { ...secret, code, timeRemaining };\n        })\n      );\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const addSecret = () => {\n    if (!serviceName.trim() || !secretKey.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in both service name and secret key\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const { code, timeRemaining } = generateTOTP(secretKey);\n    const newSecret: TotpSecret = {\n      id: Date.now().toString(),\n      serviceName: serviceName.trim(),\n      secretKey: secretKey.trim(),\n      code,\n      timeRemaining\n    };\n\n    const updatedSecrets = [...secrets, newSecret];\n    setSecrets(updatedSecrets);\n    localStorage.setItem('totp-secrets', JSON.stringify(updatedSecrets));\n    \n    setServiceName(\"\");\n    setSecretKey(\"\");\n    \n    toast({\n      title: \"Secret Added\",\n      description: `TOTP secret for ${serviceName} has been added`\n    });\n  };\n\n  const removeSecret = (id: string) => {\n    const updatedSecrets = secrets.filter(s => s.id !== id);\n    setSecrets(updatedSecrets);\n    localStorage.setItem('totp-secrets', JSON.stringify(updatedSecrets));\n    \n    toast({\n      title: \"Secret Removed\",\n      description: \"TOTP secret has been removed\"\n    });\n  };\n\n  const copyCode = async (code: string, serviceName: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({\n        title: \"Copied\",\n        description: `${serviceName} code copied to clipboard`\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy code\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const clearAll = () => {\n    setServiceName(\"\");\n    setSecretKey(\"\");\n  };\n\n  const exportSecrets = () => {\n    const data = JSON.stringify(secrets, null, 2);\n    const blob = new Blob([data], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'totp-secrets.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const importSecrets = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const imported = JSON.parse(e.target?.result as string);\n        setSecrets(imported);\n        localStorage.setItem('totp-secrets', JSON.stringify(imported));\n        toast({\n          title: \"Imported\",\n          description: `${imported.length} secrets imported successfully`\n        });\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to import secrets file\",\n          variant: \"destructive\"\n        });\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-3 md:px-6\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center space-x-3 mb-2\">\n          <div className=\"bg-blue-600 text-white p-2 rounded\">\n            <Shield className=\"w-6 h-6\" />\n          </div>\n          <h1 className=\"text-2xl md:text-3xl font-bold text-gray-900 dark:text-white\">\n            TOTP Authenticator\n          </h1>\n        </div>\n        <p className=\"text-base md:text-lg text-gray-600 dark:text-gray-400\">\n          Generate and manage TOTP codes for your two-factor authentication services. Works offline with localStorage and syncs with your account when logged in.\n        </p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-2 gap-4 md:gap-8\">\n        {/* Left Panel - Add New Secret */}\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle>Add New Secret</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"serviceName\">Service Name</Label>\n                <Input\n                  id=\"serviceName\"\n                  placeholder=\"e.g., Google, GitHub, etc.\"\n                  value={serviceName}\n                  onChange={(e) => setServiceName(e.target.value)}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"secretKey\">Secret Key</Label>\n                <Input\n                  id=\"secretKey\"\n                  placeholder=\"Enter TOTP secret key\"\n                  value={secretKey}\n                  onChange={(e) => setSecretKey(e.target.value)}\n                  type=\"password\"\n                />\n              </div>\n\n              <div className=\"flex space-x-2\">\n                <Button\n                  onClick={addSecret}\n                  disabled={!serviceName.trim() || !secretKey.trim()}\n                  className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Secret\n                </Button>\n                <Button\n                  onClick={clearAll}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  <X className=\"w-4 h-4 mr-2\" />\n                  Clear\n                </Button>\n              </div>\n\n              <div className=\"flex space-x-2 pt-4 border-t\">\n                <Button\n                  onClick={exportSecrets}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  disabled={secrets.length === 0}\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Secrets\n                </Button>\n                <div className=\"flex-1\">\n                  <input\n                    type=\"file\"\n                    accept=\".json\"\n                    onChange={importSecrets}\n                    className=\"hidden\"\n                    id=\"import-file\"\n                  />\n                  <label htmlFor=\"import-file\" className=\"w-full\">\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full cursor-pointer\"\n                      type=\"button\"\n                    >\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      Import Secrets\n                    </Button>\n                  </label>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Right Panel - Active Codes */}\n        <div>\n          <Card className=\"h-full\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <RefreshCw className=\"w-5 h-5\" />\n                <span>Active Codes</span>\n              </CardTitle>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Click any code to copy to clipboard\n              </p>\n            </CardHeader>\n            <CardContent>\n              {secrets.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {secrets.map((secret) => (\n                    <div\n                      key={secret.id}\n                      className=\"border rounded-lg p-4\"\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"font-medium text-gray-900 dark:text-white\">\n                          {secret.serviceName}\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeSecret(secret.id)}\n                          className=\"text-red-500 hover:text-red-700\"\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                      \n                      <div\n                        className=\"bg-gray-100 dark:bg-gray-800 rounded-lg p-3 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors\"\n                        onClick={() => copyCode(secret.code, secret.serviceName)}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"font-mono text-2xl font-bold text-blue-600\">\n                            {secret.code.slice(0, 3)} {secret.code.slice(3)}\n                          </div>\n                          <Copy className=\"w-5 h-5 text-gray-400\" />\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between mt-2\">\n                        <div className=\"text-sm text-gray-500\">\n                          Refreshes in {secret.timeRemaining}s\n                        </div>\n                        <div className=\"w-16 bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                          <div \n                            className=\"bg-blue-600 h-2 rounded-full transition-all duration-1000\"\n                            style={{ width: `${(secret.timeRemaining / 30) * 100}%` }}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Shield className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n                  <p className=\"text-gray-500 dark:text-gray-400 mb-2\">\n                    No active codes\n                  </p>\n                  <p className=\"text-sm text-gray-400\">\n                    Add your first TOTP secret to get started\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11680},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}","size_bytes":2764},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/pages/admin/AddProduct.tsx":{"content":"import React, { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, Plus, X } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ProductFormData {\n  title: string;\n  description: string;\n  price: string;\n  category: string;\n  subcategory: string;\n  type: string;\n  stock: string;\n  maxPerUser: string;\n  images: string[];\n  tags: string[];\n  isActive: boolean;\n  sellerId: string;\n}\n\nexport function AddProduct() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [formData, setFormData] = useState<ProductFormData>({\n    title: \"\",\n    description: \"\",\n    price: \"\",\n    category: \"\",\n    subcategory: \"\",\n    type: \"\",\n    stock: \"\",\n    maxPerUser: \"1\",\n    images: [],\n    tags: [],\n    isActive: true,\n    sellerId: user?.id || \"\",\n  });\n\n  const [currentImage, setCurrentImage] = useState(\"\");\n  const [currentTag, setCurrentTag] = useState(\"\");\n\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/products\", productData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Product Created\",\n        description: `${data.title} has been successfully added to the marketplace.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setLocation(\"/admin/products\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInputChange = (field: keyof ProductFormData, value: string | boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const addImage = () => {\n    if (currentImage.trim() && !formData.images.includes(currentImage.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        images: [...prev.images, currentImage.trim()]\n      }));\n      setCurrentImage(\"\");\n    }\n  };\n\n  const removeImage = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      images: prev.images.filter((_, i) => i !== index)\n    }));\n  };\n\n  const addTag = () => {\n    if (currentTag.trim() && !formData.tags.includes(currentTag.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        tags: [...prev.tags, currentTag.trim()]\n      }));\n      setCurrentTag(\"\");\n    }\n  };\n\n  const removeTag = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      tags: prev.tags.filter((_, i) => i !== index)\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validation\n    if (!formData.title.trim() || !formData.price || !formData.category || !formData.type) {\n      toast({\n        title: \"Missing Fields\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const price = parseFloat(formData.price);\n    if (isNaN(price) || price < 0) {\n      toast({\n        title: \"Invalid Price\",\n        description: \"Please enter a valid price\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Prepare data for submission\n    const productData = {\n      title: formData.title.trim(),\n      description: formData.description.trim() || null,\n      price: formData.price,\n      category: formData.category,\n      subcategory: formData.subcategory.trim() || null,\n      type: formData.type,\n      stock: formData.stock ? parseInt(formData.stock) : null,\n      maxPerUser: formData.maxPerUser ? parseInt(formData.maxPerUser) : 1,\n      images: formData.images.length > 0 ? formData.images : null,\n      tags: formData.tags.length > 0 ? formData.tags : null,\n      isActive: formData.isActive,\n      sellerId: formData.sellerId || null,\n    };\n\n    createProductMutation.mutate(productData);\n  };\n\n  // Check admin access\n  if (user?.role !== \"admin\") {\n    return (\n      <div className=\"max-w-full mx-auto px-3 md:px-6 text-center py-12\">\n        <p className=\"text-gray-500\">Access denied. Admin privileges required.</p>\n        <Link href=\"/admin\">\n          <Button className=\"mt-4\">Back to Admin</Button>\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto px-3 md:px-6 py-8\">\n      <div className=\"mb-6\">\n        <Link href=\"/admin/products\">\n          <Button variant=\"outline\" className=\"mb-4\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Products\n          </Button>\n        </Link>\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Add New Product</h1>\n        <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n          Create a new product for the marketplace\n        </p>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* Basic Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Basic Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Product Title *</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => handleInputChange('title', e.target.value)}\n                  placeholder=\"Enter product title\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"price\">Price (USD) *</Label>\n                <Input\n                  id=\"price\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"0\"\n                  value={formData.price}\n                  onChange={(e) => handleInputChange('price', e.target.value)}\n                  placeholder=\"0.00\"\n                  required\n                />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => handleInputChange('description', e.target.value)}\n                placeholder=\"Enter product description\"\n                rows={4}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Category & Type */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Category & Type</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"category\">Category *</Label>\n                <Select value={formData.category} onValueChange={(value) => handleInputChange('category', value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"shop\">Shop</SelectItem>\n                    <SelectItem value=\"generator\">Generator</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"subcategory\">Subcategory</Label>\n                <Input\n                  id=\"subcategory\"\n                  value={formData.subcategory}\n                  onChange={(e) => handleInputChange('subcategory', e.target.value)}\n                  placeholder=\"e.g., licenses, invoices, games\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"type\">Product Type *</Label>\n                <Select value={formData.type} onValueChange={(value) => handleInputChange('type', value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"license_key\">License Key</SelectItem>\n                    <SelectItem value=\"text_lines\">Text Lines</SelectItem>\n                    <SelectItem value=\"service\">Service</SelectItem>\n                    <SelectItem value=\"digital_file\">Digital File</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Stock & Limits */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Stock & Limits</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"stock\">Stock Quantity</Label>\n                <Input\n                  id=\"stock\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={formData.stock}\n                  onChange={(e) => handleInputChange('stock', e.target.value)}\n                  placeholder=\"Leave empty for unlimited\"\n                />\n                <p className=\"text-sm text-gray-500\">Leave empty for unlimited stock</p>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"maxPerUser\">Max Per User</Label>\n                <Input\n                  id=\"maxPerUser\"\n                  type=\"number\"\n                  min=\"1\"\n                  value={formData.maxPerUser}\n                  onChange={(e) => handleInputChange('maxPerUser', e.target.value)}\n                  placeholder=\"1\"\n                />\n                <p className=\"text-sm text-gray-500\">Maximum purchases per user</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Images */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Product Images</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex gap-2\">\n              <Input\n                value={currentImage}\n                onChange={(e) => setCurrentImage(e.target.value)}\n                placeholder=\"Enter image URL\"\n                onKeyDown={(e) => e.key === 'Enter' && (e.preventDefault(), addImage())}\n              />\n              <Button type=\"button\" onClick={addImage} variant=\"outline\">\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            \n            {formData.images.length > 0 && (\n              <div className=\"space-y-2\">\n                <Label>Images:</Label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {formData.images.map((image, index) => (\n                    <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                      <span className=\"max-w-[200px] truncate\">{image}</span>\n                      <button\n                        type=\"button\"\n                        onClick={() => removeImage(index)}\n                        className=\"ml-1 hover:text-red-500\"\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </button>\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Tags */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Tags</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex gap-2\">\n              <Input\n                value={currentTag}\n                onChange={(e) => setCurrentTag(e.target.value)}\n                placeholder=\"Enter tag\"\n                onKeyDown={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}\n              />\n              <Button type=\"button\" onClick={addTag} variant=\"outline\">\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            \n            {formData.tags.length > 0 && (\n              <div className=\"space-y-2\">\n                <Label>Tags:</Label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {formData.tags.map((tag, index) => (\n                    <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                      {tag}\n                      <button\n                        type=\"button\"\n                        onClick={() => removeTag(index)}\n                        className=\"ml-1 hover:text-red-500\"\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </button>\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Settings</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                id=\"isActive\"\n                checked={formData.isActive}\n                onChange={(e) => handleInputChange('isActive', e.target.checked)}\n                className=\"rounded\"\n              />\n              <Label htmlFor=\"isActive\">Product is active and visible</Label>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Submit Button */}\n        <div className=\"flex justify-end space-x-4\">\n          <Link href=\"/admin/products\">\n            <Button type=\"button\" variant=\"outline\">Cancel</Button>\n          </Link>\n          <Button \n            type=\"submit\" \n            disabled={createProductMutation.isPending}\n            className=\"bg-blue-600 hover:bg-blue-700\"\n          >\n            {createProductMutation.isPending ? \"Creating...\" : \"Create Product\"}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}","size_bytes":14770},"attached_assets/content-1755698840931.md":{"content":"","size_bytes":0},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      \n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `private, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets a generated file for download with access control\n  async getGeneratedFile(filename: string, userId: string): Promise<File> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    const fullPath = `${privateObjectDir}/generated/${filename}`;\n    \n    // Parse the filename to verify user access\n    const parts = filename.split('_');\n    if (parts.length < 3 || parts[1] !== userId) {\n      throw new ObjectNotFoundError();\n    }\n    \n    const { bucketName, objectName } = parseObjectPath(fullPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const file = bucket.file(objectName);\n    \n    const [exists] = await file.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    \n    return file;\n  }\n\n  // Uploads a generated file (called by external webhook)\n  async uploadGeneratedFile(filename: string, buffer: Buffer): Promise<void> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    const fullPath = `${privateObjectDir}/generated/${filename}`;\n    \n    const { bucketName, objectName } = parseObjectPath(fullPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const file = bucket.file(objectName);\n    \n    await file.save(buffer, {\n      metadata: {\n        contentType: 'image/png',\n      },\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}","size_bytes":4098},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}","size_bytes":1736},"client/src/components/OrderDetailsModal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Copy, Download, CheckCircle, Clock, AlertCircle, RefreshCw, Calendar, User, Package, CreditCard } from \"lucide-react\";\nimport { type Order, type Product } from \"@shared/schema\";\n\ninterface OrderDetailsModalProps {\n  order: Order | null;\n  product: Product | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onSupportClick?: (orderId: string) => void;\n  onRefundClick?: (orderId: string) => void;\n}\n\nexport function OrderDetailsModal({ order, product, isOpen, onClose, onSupportClick, onRefundClick }: OrderDetailsModalProps) {\n  if (!order || !product) return null;\n\n  const formatDate = (date: Date | string | null) => {\n    if (!date) return \"--\";\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    return dateObj.toLocaleDateString(\"de-DE\", {\n      day: \"2-digit\",\n      month: \"2-digit\", \n      year: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"delivered\":\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case \"processing\":\n        return <Clock className=\"w-4 h-4\" />;\n      case \"in_resolution\":\n        return <AlertCircle className=\"w-4 h-4\" />;\n      case \"refunded\":\n        return <RefreshCw className=\"w-4 h-4\" />;\n      default:\n        return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"delivered\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"processing\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case \"in_resolution\":\n        return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"refunded\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Package className=\"w-5 h-5\" />\n            <span>Order Details</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Order Status */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-gray-600\">Status:</span>\n              <Badge className={`${getStatusColor(order.status || 'processing')} flex items-center space-x-1`}>\n                {getStatusIcon(order.status || 'processing')}\n                <span className=\"capitalize\">{order.status || 'processing'}</span>\n              </Badge>\n            </div>\n            <div className=\"text-sm text-gray-500\">\n              Order #{order.id}\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Product Details */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold flex items-center space-x-2\">\n              <Package className=\"w-4 h-4\" />\n              <span>Product Information</span>\n            </h3>\n            \n            <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4\">\n              <div className=\"flex space-x-4\">\n                {product.images?.[0] && (\n                  <img \n                    src={product.images[0]} \n                    alt={product.title}\n                    className=\"w-16 h-16 object-cover rounded-lg border\"\n                  />\n                )}\n                <div className=\"flex-1\">\n                  <h4 className=\"font-medium text-gray-900 dark:text-white\">{product.title}</h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">{product.description}</p>\n                  <div className=\"flex items-center justify-between mt-2\">\n                    <span className=\"text-sm text-gray-500\">Type: {product.type}</span>\n                    <span className=\"font-bold text-lg\">€{parseFloat(product.price).toFixed(2)}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Order Information */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center space-x-2 text-sm\">\n                <Calendar className=\"w-4 h-4 text-gray-400\" />\n                <span className=\"text-gray-600\">Order Date:</span>\n              </div>\n              <p className=\"text-sm font-medium\">{formatDate(order.createdAt)}</p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex items-center space-x-2 text-sm\">\n                <User className=\"w-4 h-4 text-gray-400\" />\n                <span className=\"text-gray-600\">Seller:</span>\n              </div>\n              <p className=\"text-sm font-medium\">Admin Seller</p>\n            </div>\n          </div>\n\n          {/* Digital Content (if delivered) */}\n          {order.status === \"delivered\" && order.orderData && (\n            (order.orderData as any).licenseKey || (order.orderData as any).digitalFile || (order.orderData as any).textLines\n          ) && (\n            <>\n              <Separator />\n              <div className=\"space-y-4\">\n                <h3 className=\"font-semibold flex items-center space-x-2\">\n                  <Download className=\"w-4 h-4\" />\n                  <span>Digital Content</span>\n                </h3>\n                \n                <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 space-y-3\">\n                  {(order.orderData as any)?.licenseKey && (\n                    <div>\n                      <label className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">License Key:</label>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <code className=\"flex-1 bg-white dark:bg-gray-800 px-3 py-2 rounded border text-sm\">\n                          {(order.orderData as any).licenseKey}\n                        </code>\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => navigator.clipboard.writeText((order.orderData as any).licenseKey)}>\n                          <Copy className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {(order.orderData as any)?.digitalFile && (\n                    <div>\n                      <label className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">Download:</label>\n                      <div className=\"mt-1\">\n                        <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700\">\n                          <Download className=\"w-4 h-4 mr-2\" />\n                          Download File\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {(order.orderData as any)?.textLines && (\n                    <div>\n                      <label className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">Generated Content:</label>\n                      <div className=\"mt-1\">\n                        <div className=\"bg-white dark:bg-gray-800 p-3 rounded border text-sm whitespace-pre-wrap\">\n                          {(order.orderData as any).textLines}\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </>\n          )}\n\n          <Separator />\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-between items-center\">\n            <div className=\"space-x-2\">\n              {order.status === \"delivered\" && (\n                <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Download\n                </Button>\n              )}\n            </div>\n            \n            <div className=\"space-x-2\">\n              <Button variant=\"outline\" onClick={() => onSupportClick?.(order.id)}>\n                <User className=\"w-4 h-4 mr-2\" />\n                Contact Support\n              </Button>\n              \n              {order.status !== \"delivered\" && order.status !== \"refunded\" && (\n                <Button variant=\"outline\" className=\"text-red-600 border-red-200 hover:bg-red-50\" \n                  onClick={() => onRefundClick?.(order.id)}>\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Request Refund\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9038},"client/src/contexts/CartContext.tsx":{"content":"import React, { createContext, useContext, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface CartItemWithProduct {\n  id: string;\n  userId: string;\n  productId: string;\n  quantity: number;\n  createdAt: string;\n  title: string;\n  price: number;\n  image: string;\n  type: string;\n}\n\ninterface CartContextType {\n  items: CartItemWithProduct[];\n  itemCount: number;\n  total: number;\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n  addItem: (item: { id: string; title: string; price: number; image: string; type: string }) => void;\n  removeItem: (id: string) => void;\n  updateQuantity: (id: string, quantity: number) => void;\n  clearCart: () => void;\n  isLoading: boolean;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport function CartProvider({ children }: { children: React.ReactNode }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Fetch cart from database\n  const { data: cartItems = [], isLoading } = useQuery({\n    queryKey: [\"/api/cart\", user?.id],\n    queryFn: async () => {\n      if (!user?.id) return [];\n      const response = await apiRequest(\"GET\", `/api/cart/user/${user.id}`);\n      const dbCartItems = await response.json();\n      \n      // Fetch product details for each cart item\n      const productsResponse = await apiRequest(\"GET\", \"/api/products\");\n      const products = await productsResponse.json();\n      \n      // Merge cart items with product details\n      return dbCartItems.map((cartItem: any) => {\n        const product = products.find((p: any) => p.id === cartItem.productId);\n        return {\n          ...cartItem,\n          title: product?.title || \"Unknown Product\",\n          price: parseFloat(product?.price || \"0\"),\n          image: product?.images?.[0] || \"\",\n          type: product?.type || \"unknown\"\n        };\n      });\n    },\n    enabled: !!user?.id\n  });\n\n  // Add to cart mutation\n  const addToCartMutation = useMutation({\n    mutationFn: async (item: { productId: string; quantity?: number }) => {\n      if (!user?.id) throw new Error(\"User not logged in\");\n      const response = await apiRequest(\"POST\", \"/api/cart\", {\n        userId: user.id,\n        productId: item.productId,\n        quantity: item.quantity || 1\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\", user?.id] });\n    }\n  });\n\n  // Update cart item mutation  \n  const updateCartMutation = useMutation({\n    mutationFn: async ({ id, quantity }: { id: string; quantity: number }) => {\n      const response = await apiRequest(\"PUT\", `/api/cart/${id}`, { quantity });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\", user?.id] });\n    }\n  });\n\n  // Remove from cart mutation\n  const removeFromCartMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/cart/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\", user?.id] });\n    }\n  });\n\n  // Clear cart mutation\n  const clearCartMutation = useMutation({\n    mutationFn: async () => {\n      if (!user?.id) throw new Error(\"User not logged in\");\n      const response = await apiRequest(\"DELETE\", `/api/cart/user/${user.id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\", user?.id] });\n    }\n  });\n\n  const addItem = (item: { id: string; title: string; price: number; image: string; type: string }) => {\n    addToCartMutation.mutate({ productId: item.id, quantity: 1 });\n  };\n\n  const updateQuantity = (id: string, quantity: number) => {\n    if (quantity <= 0) {\n      removeItem(id);\n      return;\n    }\n    updateCartMutation.mutate({ id, quantity });\n  };\n\n  const removeItem = (id: string) => {\n    removeFromCartMutation.mutate(id);\n  };\n\n  const clearCart = () => {\n    clearCartMutation.mutate();\n  };\n\n  const total = cartItems.reduce((sum: number, item: CartItemWithProduct) => sum + (item.price * item.quantity), 0);\n  const totalItems = cartItems.reduce((sum: number, item: CartItemWithProduct) => sum + item.quantity, 0);\n\n  const value: CartContextType = {\n    items: cartItems,\n    itemCount: totalItems,\n    total,\n    isOpen,\n    setIsOpen,\n    addItem,\n    removeItem,\n    updateQuantity,\n    clearCart,\n    isLoading: isLoading || addToCartMutation.isPending || updateCartMutation.isPending || removeFromCartMutation.isPending || clearCartMutation.isPending,\n  };\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}","size_bytes":5091},"client/src/hooks/useNotifications.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"./useAuth\";\nimport type { Notification } from \"@shared/schema\";\n\nexport function useNotifications() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Query for user notifications\n  const { data: notifications = [], isLoading } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\", user?.id],\n    queryFn: async () => {\n      if (!user?.id) return [];\n      const response = await apiRequest(\"GET\", `/api/notifications/user/${user.id}`);\n      return response.json();\n    },\n    enabled: !!user?.id,\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  // Query for unread notification count\n  const { data: unreadCountData } = useQuery<{ count: number }>({\n    queryKey: [\"/api/notifications/unread\", user?.id],\n    queryFn: async () => {\n      if (!user?.id) return { count: 0 };\n      const response = await apiRequest(\"GET\", `/api/notifications/user/${user.id}/unread-count`);\n      return response.json();\n    },\n    enabled: !!user?.id,\n    refetchInterval: 15000, // Check more frequently for unread count\n  });\n\n  // Mutation to mark notification as read\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      const response = await apiRequest(\"PATCH\", `/api/notifications/${notificationId}/read`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\", user?.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications/unread\", user?.id] });\n    },\n  });\n\n  // Mutation to mark all notifications as read\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      if (!user?.id) return;\n      const response = await apiRequest(\"PATCH\", `/api/notifications/user/${user.id}/read-all`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\", user?.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications/unread\", user?.id] });\n    },\n  });\n\n  const formatNotificationTime = (createdAt: string) => {\n    const now = new Date();\n    const created = new Date(createdAt);\n    const diff = Math.floor((now.getTime() - created.getTime()) / 1000);\n\n    if (diff < 60) return `${diff}s ago`;\n    if (diff < 3600) return `${Math.floor(diff / 60)}m ago`;\n    if (diff < 86400) return `${Math.floor(diff / 3600)}h ago`;\n    if (diff < 604800) return `${Math.floor(diff / 86400)}d ago`;\n    return created.toLocaleDateString();\n  };\n\n  return {\n    notifications,\n    unreadCount: unreadCountData?.count || 0,\n    isLoading,\n    markAsRead: markAsReadMutation.mutate,\n    markAllAsRead: markAllAsReadMutation.mutate,\n    formatNotificationTime,\n  };\n}","size_bytes":2906},"client/src/components/generators/MediaMarktGenerator.tsx":{"content":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Download, FileText, Loader2 } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface MediaMarktFormData {\n  bestellnummer: string;\n  nummerObenRechts: string;\n  rechnungsname: string;\n  liefername: string;\n  bestelldatum: string;\n  rechnungsdatum: string;\n  rechnungsstrasse: string;\n  lieferstrasse: string;\n  lieferort: string;\n  rechnungsnummer: string;\n  rechnungsstadt: string;\n  lieferstadt: string;\n  zahlungsart: string;\n  rechnungstelefonummer: string;\n  liefertelefonummer: string;\n  artikelnummer: string;\n  menge: string;\n  einzelpreis: string;\n  produktbezeichnung: string;\n  imei: string;\n}\n\nexport function MediaMarktGenerator() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState<MediaMarktFormData>({\n    bestellnummer: \"\",\n    nummerObenRechts: \"\",\n    rechnungsname: \"\",\n    liefername: \"\",\n    bestelldatum: \"\",\n    rechnungsdatum: \"\",\n    rechnungsstrasse: \"\",\n    lieferstrasse: \"\",\n    lieferort: \"Zustellung\",\n    rechnungsnummer: \"\",\n    rechnungsstadt: \"\",\n    lieferstadt: \"\",\n    zahlungsart: \"PayPal\",\n    rechnungstelefonummer: \"\",\n    liefertelefonummer: \"\",\n    artikelnummer: \"\",\n    menge: \"1\",\n    einzelpreis: \"\",\n    produktbezeichnung: \"\",\n    imei: \"\",\n  });\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [userOrders, setUserOrders] = useState<any[]>([]);\n\n  React.useEffect(() => {\n    if (user) {\n      fetchUserOrders();\n    }\n  }, [user]);\n\n  const fetchUserOrders = async () => {\n    try {\n      const response = await apiRequest(\"GET\", `/api/orders/user/${user?.id}`);\n      const orders = await response.json();\n      const mediaMarktOrders = orders.filter((order: any) => \n        order.productId === \"prod-6\" && order.status === \"delivered\"\n      );\n      setUserOrders(mediaMarktOrders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n    }\n  };\n\n  const handleInputChange = (field: keyof MediaMarktFormData, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    } as MediaMarktFormData));\n  };\n\n  const handleGenerate = async () => {\n    if (!user) {\n      toast({\n        title: \"Error\",\n        description: \"You must be logged in to generate invoices\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Validation\n    const requiredFields = ['bestellnummer', 'rechnungsname', 'bestelldatum', 'rechnungsdatum', 'produktbezeichnung'];\n    const missingFields = requiredFields.filter(field => !formData[field]);\n    \n    if (missingFields.length > 0) {\n      toast({\n        title: \"Missing Fields\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsGenerating(true);\n    \n    try {\n      // Send generation request\n      const response = await apiRequest(\"POST\", \"/api/generate-mediamarkt\", {\n        formData,\n        userId: user.id,\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        toast({\n          title: \"Generation Started\",\n          description: \"Your MediaMarkt invoice is being generated. You'll be notified when ready.\",\n        });\n        \n        // Refresh orders to show new pending generation\n        setTimeout(() => {\n          fetchUserOrders();\n        }, 1000);\n      } else {\n        throw new Error(result.error || \"Generation failed\");\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to generate invoice\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleDownload = async (orderId: string) => {\n    try {\n      const response = await fetch(`/api/download/mediamarkt-rechnung_${user?.id}_${orderId}.png`);\n      \n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.style.display = 'none';\n        a.href = url;\n        a.download = `MediaMarkt_Rechnung_${orderId}.png`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n        \n        toast({\n          title: \"Download Started\",\n          description: \"Your MediaMarkt invoice is downloading\",\n        });\n      } else {\n        throw new Error(\"File not found or not ready yet\");\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Download Error\",\n        description: error.message || \"Failed to download invoice\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-4 space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"w-5 h-5\" />\n            MediaMarkt Online Rechnung Generator\n          </CardTitle>\n          <CardDescription>\n            Generate professional MediaMarkt invoices with customizable order details and product specifications.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Order Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"bestellnummer\">Bestellnummer *</Label>\n              <Input\n                id=\"bestellnummer\"\n                value={formData.bestellnummer}\n                onChange={(e) => handleInputChange('bestellnummer', e.target.value)}\n                placeholder=\"160026513\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"nummerObenRechts\">Nummer oben rechts</Label>\n              <Input\n                id=\"nummerObenRechts\"\n                value={formData.nummerObenRechts}\n                onChange={(e) => handleInputChange('nummerObenRechts', e.target.value)}\n                placeholder=\"5063478231\"\n              />\n            </div>\n          </div>\n\n          {/* Customer Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"rechnungsname\">Rechnungsname *</Label>\n              <Input\n                id=\"rechnungsname\"\n                value={formData.rechnungsname}\n                onChange={(e) => handleInputChange('rechnungsname', e.target.value)}\n                placeholder=\"James Bond\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"liefername\">Liefername</Label>\n              <Input\n                id=\"liefername\"\n                value={formData.liefername}\n                onChange={(e) => handleInputChange('liefername', e.target.value)}\n                placeholder=\"James Bond\"\n              />\n            </div>\n          </div>\n\n          {/* Dates */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"bestelldatum\">Bestelldatum *</Label>\n              <Input\n                id=\"bestelldatum\"\n                type=\"date\"\n                value={formData.bestelldatum}\n                onChange={(e) => handleInputChange('bestelldatum', e.target.value)}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"rechnungsdatum\">Rechnungsdatum *</Label>\n              <Input\n                id=\"rechnungsdatum\"\n                type=\"date\"\n                value={formData.rechnungsdatum}\n                onChange={(e) => handleInputChange('rechnungsdatum', e.target.value)}\n              />\n            </div>\n          </div>\n\n          {/* Address Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"rechnungsstrasse\">Rechnungsstrasse</Label>\n              <Input\n                id=\"rechnungsstrasse\"\n                value={formData.rechnungsstrasse}\n                onChange={(e) => handleInputChange('rechnungsstrasse', e.target.value)}\n                placeholder=\"Agentenstsr. 7\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"lieferstrasse\">Lieferstrasse</Label>\n              <Input\n                id=\"lieferstrasse\"\n                value={formData.lieferstrasse}\n                onChange={(e) => handleInputChange('lieferstrasse', e.target.value)}\n                placeholder=\"Agentenstsr. 7\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"lieferort\">Lieferort</Label>\n              <Select value={formData.lieferort} onValueChange={(value) => handleInputChange('lieferort', value)}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Zustellung\">Zustellung</SelectItem>\n                  <SelectItem value=\"Abholung\">Abholung</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"rechnungsnummer\">Rechnungsnummer</Label>\n              <Input\n                id=\"rechnungsnummer\"\n                value={formData.rechnungsnummer}\n                onChange={(e) => handleInputChange('rechnungsnummer', e.target.value)}\n                placeholder=\"5063478231\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"rechnungsstadt\">Rechnungsstadt</Label>\n              <Input\n                id=\"rechnungsstadt\"\n                value={formData.rechnungsstadt}\n                onChange={(e) => handleInputChange('rechnungsstadt', e.target.value)}\n                placeholder=\"80802 München\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"lieferstadt\">Lieferstadt</Label>\n              <Input\n                id=\"lieferstadt\"\n                value={formData.lieferstadt}\n                onChange={(e) => handleInputChange('lieferstadt', e.target.value)}\n                placeholder=\"80802 München\"\n              />\n            </div>\n          </div>\n\n          {/* Contact Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"zahlungsart\">Zahlungsart</Label>\n              <Select value={formData.zahlungsart} onValueChange={(value) => handleInputChange('zahlungsart', value)}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"PayPal\">PayPal</SelectItem>\n                  <SelectItem value=\"Kreditkarte\">Kreditkarte</SelectItem>\n                  <SelectItem value=\"SEPA\">SEPA</SelectItem>\n                  <SelectItem value=\"Rechnung\">Rechnung</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"rechnungstelefonummer\">Rechnungstelefonummer</Label>\n              <Input\n                id=\"rechnungstelefonummer\"\n                value={formData.rechnungstelefonummer}\n                onChange={(e) => handleInputChange('rechnungstelefonummer', e.target.value)}\n                placeholder=\"49151889977\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"liefertelefonummer\">Liefertelefonummer</Label>\n              <Input\n                id=\"liefertelefonummer\"\n                value={formData.liefertelefonummer}\n                onChange={(e) => handleInputChange('liefertelefonummer', e.target.value)}\n                placeholder=\"49151889977\"\n              />\n            </div>\n          </div>\n\n          {/* Product Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"artikelnummer\">Artikelnummer</Label>\n              <Input\n                id=\"artikelnummer\"\n                value={formData.artikelnummer}\n                onChange={(e) => handleInputChange('artikelnummer', e.target.value)}\n                placeholder=\"2954329\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"menge\">Menge</Label>\n              <Input\n                id=\"menge\"\n                value={formData.menge}\n                onChange={(e) => handleInputChange('menge', e.target.value)}\n                placeholder=\"1\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"einzelpreis\">Einzelpreis</Label>\n              <Input\n                id=\"einzelpreis\"\n                value={formData.einzelpreis}\n                onChange={(e) => handleInputChange('einzelpreis', e.target.value)}\n                placeholder=\"1379.00\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"produktbezeichnung\">Produktbezeichnung *</Label>\n            <Textarea\n              id=\"produktbezeichnung\"\n              value={formData.produktbezeichnung}\n              onChange={(e) => handleInputChange('produktbezeichnung', e.target.value)}\n              placeholder=\"APPLE iPhone 16 Pro Max 5G 256 GB Titan Schwarz Dual SIM\"\n              rows={3}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"imei\">IMEI</Label>\n            <Textarea\n              id=\"imei\"\n              value={formData.imei}\n              onChange={(e) => handleInputChange('imei', e.target.value)}\n              placeholder=\"Enter IMEI number if applicable\"\n              rows={2}\n            />\n          </div>\n\n          <div className=\"flex justify-end\">\n            <Button \n              onClick={handleGenerate}\n              disabled={isGenerating}\n              className=\"bg-red-600 hover:bg-red-700 text-white\"\n            >\n              {isGenerating ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Generating...\n                </>\n              ) : (\n                <>\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Generate Invoice\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Generated Invoices */}\n      {userOrders.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Your Generated Invoices</CardTitle>\n            <CardDescription>\n              Download your previously generated MediaMarkt invoices\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {userOrders.map((order) => (\n                <div key={order.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div className=\"space-y-1\">\n                    <p className=\"font-medium\">Order #{order.id}</p>\n                    <p className=\"text-sm text-gray-500\">\n                      Generated: {new Date(order.deliveredAt || order.createdAt).toLocaleDateString()}\n                    </p>\n                    <Badge variant={order.orderData?.fileReady ? \"default\" : \"secondary\"}>\n                      {order.orderData?.fileReady ? \"Ready\" : \"Processing\"}\n                    </Badge>\n                  </div>\n                  <Button\n                    onClick={() => handleDownload(order.id)}\n                    disabled={!order.orderData?.fileReady}\n                    variant=\"outline\"\n                    size=\"sm\"\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Download\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":16858},"client/src/components/icons/CryptoIcons.tsx":{"content":"import React from 'react';\n\ninterface CryptoIconProps {\n  className?: string;\n  size?: number;\n}\n\nexport const BitcoinIcon: React.FC<CryptoIconProps> = ({ className = \"w-5 h-5\", size = 20 }) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 -0.5 34 34\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M33.2538 16.1292C33.2538 25.0371 26.0329 32.2584 17.1255 32.2584C8.21799 32.2584 0.99707 25.0371 0.99707 16.1292C0.99707 7.22128 8.21799 0 17.1255 0C26.0329 0 33.2538 7.22128 33.2538 16.1292ZM21.0002 10.1366C23.2438 10.9071 24.8849 12.0607 24.5629 14.2077C24.3291 15.7799 23.4543 16.5403 22.2921 16.8065C23.8866 17.6335 24.4301 19.2029 23.9251 21.1005C22.9664 23.8314 20.6874 24.0613 17.6562 23.4905L16.9202 26.4261L15.1434 25.9844L15.8693 23.0882C15.4087 22.9742 14.9379 22.8522 14.4529 22.7221L13.724 25.6325L11.9492 25.1908L12.6842 22.2491L9.10534 21.3496L9.98817 19.3226C9.98817 19.3226 11.2982 19.6685 11.28 19.6433C11.7832 19.7673 12.0069 19.4406 12.095 19.2238L14.0895 11.256C14.1117 10.8798 13.9811 10.4059 13.2613 10.2264C13.2886 10.2072 11.9705 9.90669 11.9705 9.90669L12.4433 8.01585L16.0272 8.90026L16.7562 5.99188L18.532 6.43358L17.8182 9.28448C18.2961 9.39238 18.776 9.5023 19.2427 9.61828L19.9514 6.78553L21.7282 7.22724L21.0002 10.1366ZM16.7488 14.9882C17.9591 15.3091 20.5928 16.0074 21.0519 14.1765C21.5202 12.3033 18.9615 11.7376 17.7087 11.4606L17.7086 11.4606L17.7085 11.4606C17.5666 11.4292 17.4414 11.4015 17.3393 11.3761L16.4545 14.9117C16.5388 14.9325 16.6378 14.9588 16.7488 14.9882ZM15.3775 20.6807C16.8271 21.0626 19.9976 21.8977 20.5021 19.8803C21.0185 17.8175 17.9445 17.1305 16.4446 16.7952L16.4441 16.7951C16.2767 16.7577 16.129 16.7247 16.008 16.6946L15.032 20.5913C15.1311 20.6158 15.2472 20.6464 15.3771 20.6806L15.3775 20.6807Z\" fill=\"#F7931A\" />\n  </svg>\n);\n\nexport const LitecoinIcon: React.FC<CryptoIconProps> = ({ className = \"w-5 h-5\", size = 20 }) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 82.6 82.6\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <circle cx=\"41.3\" cy=\"41.3\" r=\"36.83\" style={{fill:\"#fff\"}} />\n    <path d=\"M41.3,0A41.3,41.3,0,1,0,82.6,41.3h0A41.18,41.18,0,0,0,41.54,0ZM42,42.7,37.7,57.2h23a1.16,1.16,0,0,1,1.2,1.12v.38l-2,6.9a1.49,1.49,0,0,1-1.5,1.1H23.2l5.9-20.1-6.6,2L24,44l6.6-2,8.3-28.2a1.51,1.51,0,0,1,1.5-1.1h8.9a1.16,1.16,0,0,1,1.2,1.12v.38L43.5,38l6.6-2-1.4,4.8Z\" style={{fill:\"#345d9d\"}} />\n  </svg>\n);\n\nexport const MoneroIcon: React.FC<CryptoIconProps> = ({ className = \"w-5 h-5\", size = 20 }) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 256 256\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    preserveAspectRatio=\"xMidYMid\"\n  >\n    <path d=\"M127.998 0C57.318 0 0 57.317 0 127.999c0 14.127 2.29 27.716 6.518 40.43H44.8V60.733l83.2 83.2 83.198-83.2v107.695h38.282c4.231-12.714 6.521-26.303 6.521-40.43C256 57.314 198.681 0 127.998 0\" fill=\"#F60\" />\n    <path d=\"M108.867 163.062l-36.31-36.311v67.765H18.623c22.47 36.863 63.051 61.48 109.373 61.48s86.907-24.617 109.374-61.48h-53.933V126.75l-36.31 36.31-19.13 19.129-19.128-19.128h-.002z\" fill=\"#4C4C4C\" />\n  </svg>\n);","size_bytes":3228},"client/src/pages/admin/EditProduct.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, Plus, X, Upload } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n// import { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Product, InsertProduct } from \"@shared/schema\";\n// import type { UploadResult } from \"@uppy/core\";\n\ninterface ProductFormData {\n  title: string;\n  description: string;\n  price: string;\n  category: string;\n  subcategory: string;\n  type: string;\n  stock: string;\n  maxPerUser: string;\n  images: string[];\n  tags: string[];\n  isActive: boolean;\n  sellerId: string;\n  customFields?: { name: string; label: string; type: string; required: boolean }[];\n}\n\nexport function EditProduct({ productId }: { productId: string }) {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [formData, setFormData] = useState<ProductFormData>({\n    title: \"\",\n    description: \"\",\n    price: \"\",\n    category: \"\",\n    subcategory: \"\",\n    type: \"\",\n    stock: \"\",\n    maxPerUser: \"1\",\n    images: [],\n    tags: [],\n    isActive: true,\n    sellerId: user?.id || \"\",\n    customFields: [],\n  });\n\n  const [currentImage, setCurrentImage] = useState(\"\");\n  const [currentTag, setCurrentTag] = useState(\"\");\n\n  // Fetch product data\n  const { data: product, isLoading } = useQuery({\n    queryKey: [\"/api/products\", productId],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/products/${productId}`);\n      return response.json();\n    },\n  });\n\n  // Update form data when product is loaded\n  useEffect(() => {\n    if (product) {\n      setFormData({\n        title: product.title || \"\",\n        description: product.description || \"\",\n        price: product.price || \"\",\n        category: product.category || \"\",\n        subcategory: product.subcategory || \"\",\n        type: product.type || \"\",\n        stock: product.stock ? product.stock.toString() : \"\",\n        maxPerUser: product.maxPerUser ? product.maxPerUser.toString() : \"1\",\n        images: product.images || [],\n        tags: product.tags || [],\n        isActive: product.isActive ?? true,\n        sellerId: product.sellerId || user?.id || \"\",\n        customFields: product.customFields || [],\n      });\n    }\n  }, [product, user?.id]);\n\n  const updateProductMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      const response = await apiRequest(\"PUT\", `/api/products/${productId}`, productData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Product Updated\",\n        description: `${data.title} has been successfully updated.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\", productId] });\n      setLocation(\"/admin/products\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInputChange = (field: keyof ProductFormData, value: string | boolean | any[]) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const addImage = () => {\n    if (currentImage.trim() && !formData.images.includes(currentImage.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        images: [...prev.images, currentImage.trim()]\n      }));\n      setCurrentImage(\"\");\n    }\n  };\n\n  const removeImage = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      images: prev.images.filter((_, i) => i !== index)\n    }));\n  };\n\n  const addTag = () => {\n    if (currentTag.trim() && !formData.tags.includes(currentTag.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        tags: [...prev.tags, currentTag.trim()]\n      }));\n      setCurrentTag(\"\");\n    }\n  };\n\n  const removeTag = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      tags: prev.tags.filter((_, i) => i !== index)\n    }));\n  };\n\n  const handleThumbnailUpload = async () => {\n    const response = await apiRequest(\"POST\", \"/api/objects/upload\");\n    const data = await response.json();\n    return {\n      method: \"PUT\" as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const handleThumbnailComplete = (result: any) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const imageUrl = uploadedFile.uploadURL as string;\n      \n      // Add thumbnail as first image\n      setFormData(prev => ({\n        ...prev,\n        images: [imageUrl, ...prev.images.filter(img => img !== imageUrl)]\n      }));\n\n      toast({\n        title: \"Thumbnail Uploaded\",\n        description: \"Product thumbnail has been uploaded successfully.\",\n      });\n    }\n  };\n\n  const addCustomField = () => {\n    const newField = {\n      name: `field_${Date.now()}`,\n      label: \"New Field\",\n      type: \"text\",\n      required: false\n    };\n    \n    setFormData(prev => ({\n      ...prev,\n      customFields: [...(prev.customFields || []), newField]\n    }));\n  };\n\n  const updateCustomField = (index: number, field: string, value: string | boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      customFields: prev.customFields?.map((customField, i) => \n        i === index ? { ...customField, [field]: value } : customField\n      ) || []\n    }));\n  };\n\n  const removeCustomField = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      customFields: prev.customFields?.filter((_, i) => i !== index) || []\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validation\n    if (!formData.title.trim() || !formData.price || !formData.category || !formData.type) {\n      toast({\n        title: \"Missing Fields\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const price = parseFloat(formData.price);\n    if (isNaN(price) || price < 0) {\n      toast({\n        title: \"Invalid Price\",\n        description: \"Please enter a valid price\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Prepare data for submission\n    const productData = {\n      title: formData.title.trim(),\n      description: formData.description.trim() || null,\n      price: formData.price,\n      category: formData.category,\n      subcategory: formData.subcategory.trim() || null,\n      type: formData.type,\n      stock: formData.stock ? parseInt(formData.stock) : null,\n      maxPerUser: formData.maxPerUser ? parseInt(formData.maxPerUser) : 1,\n      images: formData.images.length > 0 ? formData.images : null,\n      tags: formData.tags.length > 0 ? formData.tags : null,\n      isActive: formData.isActive,\n      sellerId: formData.sellerId || null,\n      customFields: formData.customFields || null,\n    };\n\n    updateProductMutation.mutate(productData);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-4xl mx-auto px-3 md:px-6 py-8\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\" />\n          <p className=\"mt-4 text-gray-500\">Loading product...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"max-w-4xl mx-auto px-3 md:px-6 py-8\">\n        <div className=\"text-center\">\n          <p className=\"text-gray-500\">Product not found</p>\n          <Link href=\"/admin/products\">\n            <Button className=\"mt-4\">Back to Products</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto px-3 md:px-6 py-8\">\n      <div className=\"mb-6\">\n        <Link href=\"/admin/products\">\n          <Button variant=\"outline\" className=\"mb-4\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Products\n          </Button>\n        </Link>\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Edit Product</h1>\n        <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n          Update product information\n        </p>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* Basic Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Basic Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Product Title *</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => handleInputChange('title', e.target.value)}\n                  placeholder=\"Enter product title\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"price\">Price (USD) *</Label>\n                <Input\n                  id=\"price\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"0\"\n                  value={formData.price}\n                  onChange={(e) => handleInputChange('price', e.target.value)}\n                  placeholder=\"0.00\"\n                  required\n                />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => handleInputChange('description', e.target.value)}\n                placeholder=\"Enter product description\"\n                rows={4}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Product Images */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Product Images</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label>Main Thumbnail (Max 4MB)</Label>\n              {/* ObjectUploader temporarily disabled\n              <ObjectUploader\n                maxNumberOfFiles={1}\n                maxFileSize={4194304} // 4MB\n                onGetUploadParameters={handleThumbnailUpload}\n                onComplete={handleThumbnailComplete}\n                buttonClassName=\"mt-2\"\n              >\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Upload Thumbnail\n              </ObjectUploader>\n              */}\n              <Input\n                value={currentImage}\n                onChange={(e) => setCurrentImage(e.target.value)}\n                placeholder=\"Enter image URL\"\n                onKeyDown={(e) => e.key === 'Enter' && (e.preventDefault(), addImage())}\n              />\n              <Button type=\"button\" onClick={addImage} variant=\"outline\">\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            \n            \n            {formData.images.length > 0 && (\n              <div className=\"space-y-2\">\n                <Label>Current Images:</Label>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  {formData.images.map((image, index) => (\n                    <div key={index} className=\"relative\">\n                      <img\n                        src={image}\n                        alt={`Product ${index + 1}`}\n                        className=\"w-full h-24 object-cover rounded border\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => removeImage(index)}\n                        className=\"absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm hover:bg-red-600\"\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </button>\n                      {index === 0 && (\n                        <Badge className=\"absolute bottom-1 left-1 text-xs\">Thumbnail</Badge>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Category & Type */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Category & Type</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"category\">Category *</Label>\n                <Select value={formData.category} onValueChange={(value) => handleInputChange('category', value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"shop\">Shop</SelectItem>\n                    <SelectItem value=\"generator\">Generator</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"subcategory\">Subcategory</Label>\n                <Input\n                  id=\"subcategory\"\n                  value={formData.subcategory}\n                  onChange={(e) => handleInputChange('subcategory', e.target.value)}\n                  placeholder=\"e.g., licenses, invoices, games\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"type\">Product Type *</Label>\n                <Select value={formData.type} onValueChange={(value) => handleInputChange('type', value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"license_key\">License Key</SelectItem>\n                    <SelectItem value=\"text_lines\">Text Lines</SelectItem>\n                    <SelectItem value=\"service\">Service</SelectItem>\n                    <SelectItem value=\"digital_file\">Digital File</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Custom Fields for Generators */}\n        {formData.category === \"generator\" && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Custom Fields for Webhook</CardTitle>\n              <p className=\"text-sm text-gray-500\">Define custom fields that will be sent with webhook requests</p>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {formData.customFields?.map((field, index) => (\n                <div key={index} className=\"p-4 border rounded-lg space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <h4 className=\"font-medium\">Field {index + 1}</h4>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeCustomField(index)}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <div>\n                      <Label>Field Name</Label>\n                      <Input\n                        value={field.name}\n                        onChange={(e) => updateCustomField(index, 'name', e.target.value)}\n                        placeholder=\"field_name\"\n                      />\n                    </div>\n                    <div>\n                      <Label>Label</Label>\n                      <Input\n                        value={field.label}\n                        onChange={(e) => updateCustomField(index, 'label', e.target.value)}\n                        placeholder=\"Field Label\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <div>\n                      <Label>Type</Label>\n                      <Select\n                        value={field.type}\n                        onValueChange={(value) => updateCustomField(index, 'type', value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"text\">Text</SelectItem>\n                          <SelectItem value=\"number\">Number</SelectItem>\n                          <SelectItem value=\"email\">Email</SelectItem>\n                          <SelectItem value=\"date\">Date</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"flex items-center space-x-2 pt-6\">\n                      <input\n                        type=\"checkbox\"\n                        id={`required-${index}`}\n                        checked={field.required}\n                        onChange={(e) => updateCustomField(index, 'required', e.target.checked)}\n                        className=\"rounded\"\n                      />\n                      <Label htmlFor={`required-${index}`}>Required</Label>\n                    </div>\n                  </div>\n                </div>\n              ))}\n              \n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={addCustomField}\n                className=\"w-full\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Custom Field\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Stock & Limits */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Stock & Limits</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"stock\">Stock Quantity</Label>\n                <Input\n                  id=\"stock\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={formData.stock}\n                  onChange={(e) => handleInputChange('stock', e.target.value)}\n                  placeholder=\"Leave empty for unlimited\"\n                />\n                <p className=\"text-sm text-gray-500\">Leave empty for unlimited stock</p>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"maxPerUser\">Max Per User</Label>\n                <Input\n                  id=\"maxPerUser\"\n                  type=\"number\"\n                  min=\"1\"\n                  value={formData.maxPerUser}\n                  onChange={(e) => handleInputChange('maxPerUser', e.target.value)}\n                  placeholder=\"1\"\n                />\n                <p className=\"text-sm text-gray-500\">Maximum purchases per user</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Tags */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Tags</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex gap-2\">\n              <Input\n                value={currentTag}\n                onChange={(e) => setCurrentTag(e.target.value)}\n                placeholder=\"Enter tag\"\n                onKeyDown={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}\n              />\n              <Button type=\"button\" onClick={addTag} variant=\"outline\">\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            \n            {formData.tags.length > 0 && (\n              <div className=\"space-y-2\">\n                <Label>Tags:</Label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {formData.tags.map((tag, index) => (\n                    <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                      {tag}\n                      <button\n                        type=\"button\"\n                        onClick={() => removeTag(index)}\n                        className=\"ml-1 hover:text-red-500\"\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </button>\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Settings</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                id=\"isActive\"\n                checked={formData.isActive}\n                onChange={(e) => handleInputChange('isActive', e.target.checked)}\n                className=\"rounded\"\n              />\n              <Label htmlFor=\"isActive\">Product is active and visible</Label>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Submit Button */}\n        <div className=\"flex justify-end space-x-4\">\n          <Link href=\"/admin/products\">\n            <Button type=\"button\" variant=\"outline\">Cancel</Button>\n          </Link>\n          <Button \n            type=\"submit\" \n            disabled={updateProductMutation.isPending}\n            className=\"bg-blue-600 hover:bg-blue-700\"\n          >\n            {updateProductMutation.isPending ? \"Updating...\" : \"Update Product\"}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}","size_bytes":22644},"client/src/pages/admin/ProductManagement.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { \n  Eye, \n  Edit, \n  Trash2, \n  Plus, \n  ArrowLeft,\n  Search,\n  Filter,\n  MoreVertical \n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Product } from \"@shared/schema\";\n\nexport function ProductManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterCategory, setFilterCategory] = useState(\"all\");\n  const [deleteProductId, setDeleteProductId] = useState<string | null>(null);\n\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/products/${productId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Product Deleted\",\n        description: \"Product has been successfully deleted.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setDeleteProductId(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleProductStatus = useMutation({\n    mutationFn: async ({ productId, isActive }: { productId: string; isActive: boolean }) => {\n      const response = await apiRequest(\"PUT\", `/api/products/${productId}`, { isActive });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Status Updated\",\n        description: \"Product status has been updated.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update product status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter products based on search term and category\n  const filteredProducts = products.filter((product: Product) => {\n    const matchesSearch = product.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = filterCategory === \"all\" || product.category === filterCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const getStatusBadge = (isActive: boolean | null) => {\n    const active = isActive ?? true;\n    return (\n      <Badge variant={active ? \"default\" : \"secondary\"}>\n        {active ? \"Active\" : \"Unpublished\"}\n      </Badge>\n    );\n  };\n\n  const getTypeBadge = (type: string) => {\n    const variants = {\n      license_key: \"default\",\n      text_lines: \"secondary\",\n      service: \"outline\",\n      digital_file: \"destructive\"\n    } as const;\n    \n    return (\n      <Badge variant={variants[type as keyof typeof variants] || \"secondary\"}>\n        {type.replace(\"_\", \" \")}\n      </Badge>\n    );\n  };\n\n  const handleDeleteProduct = (productId: string) => {\n    deleteProductMutation.mutate(productId);\n  };\n\n  const handleToggleStatus = (product: Product) => {\n    toggleProductStatus.mutate({\n      productId: product.id,\n      isActive: !(product.isActive ?? true)\n    });\n  };\n\n  // Check admin access\n  if (user?.role !== \"admin\") {\n    return (\n      <div className=\"max-w-full mx-auto px-3 md:px-6 text-center py-12\">\n        <p className=\"text-gray-500\">Access denied. Admin privileges required.</p>\n        <Link href=\"/admin\">\n          <Button className=\"mt-4\">Back to Admin</Button>\n        </Link>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-full mx-auto px-3 md:px-6 py-8\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\" />\n          <p className=\"mt-4 text-gray-500\">Loading products...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-full mx-auto px-3 md:px-6 py-8\">\n      <div className=\"mb-6\">\n        <Link href=\"/admin\">\n          <Button variant=\"outline\" className=\"mb-4\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Admin\n          </Button>\n        </Link>\n        \n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Product Management</h1>\n            <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n              Manage your marketplace products\n            </p>\n          </div>\n          \n          <Link href=\"/admin/add-product\">\n            <Button className=\"bg-blue-600 hover:bg-blue-700\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Product\n            </Button>\n          </Link>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search products...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Button\n                variant={filterCategory === \"all\" ? \"default\" : \"outline\"}\n                onClick={() => setFilterCategory(\"all\")}\n                size=\"sm\"\n              >\n                All\n              </Button>\n              <Button\n                variant={filterCategory === \"shop\" ? \"default\" : \"outline\"}\n                onClick={() => setFilterCategory(\"shop\")}\n                size=\"sm\"\n              >\n                Shop\n              </Button>\n              <Button\n                variant={filterCategory === \"generator\" ? \"default\" : \"outline\"}\n                onClick={() => setFilterCategory(\"generator\")}\n                size=\"sm\"\n              >\n                Generator\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Products Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Product</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Price</TableHead>\n                  <TableHead>Stock</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredProducts.map((product: Product) => (\n                  <TableRow key={product.id}>\n                    <TableCell className=\"font-medium\">\n                      <div className=\"flex items-center gap-3\">\n                        {product.images && product.images.length > 0 && (\n                          <img\n                            src={product.images[0]}\n                            alt={product.title}\n                            className=\"w-10 h-10 rounded object-cover\"\n                          />\n                        )}\n                        <div>\n                          <div className=\"font-semibold\">{product.title}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            {product.category} • {product.subcategory}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {getTypeBadge(product.type)}\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"font-semibold\">${product.price}</span>\n                    </TableCell>\n                    <TableCell>\n                      {product.stock === null ? (\n                        <Badge variant=\"outline\">Unlimited</Badge>\n                      ) : (\n                        <span className=\"font-medium\">{product.stock}</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <button \n                        onClick={() => handleToggleStatus(product)}\n                        className=\"hover:opacity-75 transition-opacity\"\n                      >\n                        {getStatusBadge(product.isActive)}\n                      </button>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex items-center justify-end gap-2\">\n                        <Link href={`/product/${product.id}`}>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Eye className=\"w-4 h-4 text-blue-600\" />\n                          </Button>\n                        </Link>\n                        <Link href={`/admin/edit-product/${product.id}`}>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Edit className=\"w-4 h-4 text-blue-600\" />\n                          </Button>\n                        </Link>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => setDeleteProductId(product.id)}\n                        >\n                          <Trash2 className=\"w-4 h-4 text-red-600\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {filteredProducts.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8\">\n                      <p className=\"text-gray-500\">No products found</p>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deleteProductId} onOpenChange={() => setDeleteProductId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Product</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this product? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deleteProductId && handleDeleteProduct(deleteProductId)}\n              className=\"bg-red-600 hover:bg-red-700\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}","size_bytes":12088}}}